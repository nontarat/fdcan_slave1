
fdcan_slave1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005224  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08005574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  24000078  080055ec  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001b0  080055ec  000201b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d91f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019bf  00000000  00000000  0002d9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a70  00000000  00000000  0002f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009a8  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036557  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b8af  00000000  00000000  00066cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015b2ae  00000000  00000000  000725a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cd854  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f18  00000000  00000000  001cd8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080054ac 	.word	0x080054ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080054ac 	.word	0x080054ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d014      	beq.n	80003be <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
	 // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 ffdc 	bl	8001358 <HAL_FDCAN_GetRxMessage>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80003a6:	f000 f9e3 	bl	8000770 <Error_Handler>
	 // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003aa:	2200      	movs	r2, #0
 80003ac:	2101      	movs	r1, #1
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f001 f940 	bl	8001634 <HAL_FDCAN_ActivateNotification>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80003ba:	f000 f9d9 	bl	8000770 <Error_Handler>
    {
   	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
    }
*/
  }
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2400018c 	.word	0x2400018c
 80003cc:	24000158 	.word	0x24000158

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d4:	f000 fb8a 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d8:	f000 f868 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003dc:	f000 f948 	bl	8000670 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80003e0:	f000 f8e0 	bl	80005a4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80003e4:	482a      	ldr	r0, [pc, #168]	; (8000490 <main+0xc0>)
 80003e6:	f000 ff31 	bl	800124c <HAL_FDCAN_Start>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <main+0x24>
   {
 	  Error_Handler();
 80003f0:	f000 f9be 	bl	8000770 <Error_Handler>
   }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	4825      	ldr	r0, [pc, #148]	; (8000490 <main+0xc0>)
 80003fa:	f001 f91b 	bl	8001634 <HAL_FDCAN_ActivateNotification>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <main+0x38>
    {
      /* Notification Error */
      Error_Handler();
 8000404:	f000 f9b4 	bl	8000770 <Error_Handler>
    }

  TxHeader1.Identifier = node_id;						//change
 8000408:	4b22      	ldr	r3, [pc, #136]	; (8000494 <main+0xc4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <main+0xc8>)
 8000410:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <main+0xc8>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000418:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <main+0xc8>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_12;
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <main+0xc8>)
 8000420:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000424:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <main+0xc8>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 800042c:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <main+0xc8>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_FD_CAN;
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <main+0xc8>)
 8000434:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000438:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <main+0xc8>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <main+0xc8>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_SET)
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4814      	ldr	r0, [pc, #80]	; (800049c <main+0xcc>)
 800044c:	f002 f82a 	bl	80024a4 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d10c      	bne.n	8000470 <main+0xa0>
	  {
	  	  sprintf ((char *)TxData1, "node");
 8000456:	4912      	ldr	r1, [pc, #72]	; (80004a0 <main+0xd0>)
 8000458:	4812      	ldr	r0, [pc, #72]	; (80004a4 <main+0xd4>)
 800045a:	f004 fbc7 	bl	8004bec <siprintf>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2108      	movs	r1, #8
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <main+0xd8>)
 8000464:	f002 f836 	bl	80024d4 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f000 fbd0 	bl	8000c10 <HAL_Delay>
	  }

	  HAL_Delay(1000);
 8000470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000474:	f000 fbcc 	bl	8000c10 <HAL_Delay>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK)
 8000478:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <main+0xd4>)
 800047a:	4907      	ldr	r1, [pc, #28]	; (8000498 <main+0xc8>)
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <main+0xc0>)
 800047e:	f000 ff10 	bl	80012a2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d0de      	beq.n	8000446 <main+0x76>
	  {
	   Error_Handler();
 8000488:	f000 f972 	bl	8000770 <Error_Handler>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_SET)
 800048c:	e7db      	b.n	8000446 <main+0x76>
 800048e:	bf00      	nop
 8000490:	24000094 	.word	0x24000094
 8000494:	24000000 	.word	0x24000000
 8000498:	24000134 	.word	0x24000134
 800049c:	58020800 	.word	0x58020800
 80004a0:	080054c4 	.word	0x080054c4
 80004a4:	24000180 	.word	0x24000180
 80004a8:	58021000 	.word	0x58021000

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b09c      	sub	sp, #112	; 0x70
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b6:	224c      	movs	r2, #76	; 0x4c
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f004 fb8e 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2220      	movs	r2, #32
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 fb88 	bl	8004bdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004cc:	2002      	movs	r0, #2
 80004ce:	f002 f81b 	bl	8002508 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	4b31      	ldr	r3, [pc, #196]	; (800059c <SystemClock_Config+0xf0>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	4a30      	ldr	r2, [pc, #192]	; (800059c <SystemClock_Config+0xf0>)
 80004dc:	f023 0301 	bic.w	r3, r3, #1
 80004e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e2:	4b2e      	ldr	r3, [pc, #184]	; (800059c <SystemClock_Config+0xf0>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <SystemClock_Config+0xf4>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f4:	4a2a      	ldr	r2, [pc, #168]	; (80005a0 <SystemClock_Config+0xf4>)
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <SystemClock_Config+0xf4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000508:	bf00      	nop
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <SystemClock_Config+0xf4>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000516:	d1f8      	bne.n	800050a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000518:	2301      	movs	r3, #1
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000526:	2302      	movs	r3, #2
 8000528:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800052a:	2305      	movs	r3, #5
 800052c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800052e:	2360      	movs	r3, #96	; 0x60
 8000530:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000532:	2302      	movs	r3, #2
 8000534:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000536:	2302      	movs	r3, #2
 8000538:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800053a:	2302      	movs	r3, #2
 800053c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800053e:	2308      	movs	r3, #8
 8000540:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000542:	2300      	movs	r3, #0
 8000544:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054e:	4618      	mov	r0, r3
 8000550:	f002 f814 	bl	800257c <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800055a:	f000 f909 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	233f      	movs	r3, #63	; 0x3f
 8000560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2303      	movs	r3, #3
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800056a:	2308      	movs	r3, #8
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fc54 	bl	8002e30 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800058e:	f000 f8ef 	bl	8000770 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3770      	adds	r7, #112	; 0x70
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	58000400 	.word	0x58000400
 80005a0:	58024800 	.word	0x58024800

080005a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005aa:	4a30      	ldr	r2, [pc, #192]	; (800066c <MX_FDCAN1_Init+0xc8>)
 80005ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005b6:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005be:	2201      	movs	r2, #1
 80005c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005d0:	2214      	movs	r2, #20
 80005d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005d6:	220d      	movs	r2, #13
 80005d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005dc:	2202      	movs	r2, #2
 80005de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005e8:	2219      	movs	r2, #25
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000606:	2201      	movs	r2, #1
 8000608:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 800060c:	2200      	movs	r2, #0
 800060e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000612:	2201      	movs	r2, #1
 8000614:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000618:	2205      	movs	r2, #5
 800061a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 800061e:	2200      	movs	r2, #0
 8000620:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000624:	2204      	movs	r2, #4
 8000626:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 800062a:	2200      	movs	r2, #0
 800062c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000630:	2204      	movs	r2, #4
 8000632:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000636:	2200      	movs	r2, #0
 8000638:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 800063c:	2200      	movs	r2, #0
 800063e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000642:	2201      	movs	r2, #1
 8000644:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000648:	2200      	movs	r2, #0
 800064a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 800064e:	2205      	movs	r2, #5
 8000650:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_FDCAN1_Init+0xc4>)
 8000654:	f000 fc1c 	bl	8000e90 <HAL_FDCAN_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800065e:	f000 f887 	bl	8000770 <Error_Handler>

  /* Configure Rx filter */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	24000094 	.word	0x24000094
 800066c:	4000a000 	.word	0x4000a000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <MX_GPIO_Init+0xf4>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a35      	ldr	r2, [pc, #212]	; (8000764 <MX_GPIO_Init+0xf4>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <MX_GPIO_Init+0xf4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a26      	ldr	r2, [pc, #152]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_GPIO_Init+0xf4>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_GPIO_Init+0xf4>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0xf4>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0xf4>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_GPIO_Init+0xf8>)
 8000722:	f001 fed7 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000726:	2308      	movs	r3, #8
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <MX_GPIO_Init+0xf8>)
 800073e:	f001 fd01 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_GPIO_Init+0xfc>)
 8000758:	f001 fcf4 	bl	8002144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	58024400 	.word	0x58024400
 8000768:	58021000 	.word	0x58021000
 800076c:	58020800 	.word	0x58020800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_MspInit+0x30>)
 8000784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_MspInit+0x30>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x30>)
 8000794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	58024400 	.word	0x58024400

080007b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0ba      	sub	sp, #232	; 0xe8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 fa03 	bl	8004bdc <memset>
  if(hfdcan->Instance==FDCAN1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <HAL_FDCAN_MspInit+0xf8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d15e      	bne.n	800089e <HAL_FDCAN_MspInit+0xee>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000800:	23c0      	movs	r3, #192	; 0xc0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800080c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fe39 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8000824:	f7ff ffa4 	bl	8000770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_FDCAN_MspInit+0xfc>)
 800082a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <HAL_FDCAN_MspInit+0xfc>)
 8000830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000834:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_FDCAN_MspInit+0xfc>)
 800083a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800083e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_FDCAN_MspInit+0xfc>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_FDCAN_MspInit+0xfc>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_FDCAN_MspInit+0xfc>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	f003 0308 	and.w	r3, r3, #8
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000864:	2303      	movs	r3, #3
 8000866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800087c:	2309      	movs	r3, #9
 800087e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000882:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_FDCAN_MspInit+0x100>)
 800088a:	f001 fc5b 	bl	8002144 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2013      	movs	r0, #19
 8000894:	f000 fac7 	bl	8000e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000898:	2013      	movs	r0, #19
 800089a:	f000 fade 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	37e8      	adds	r7, #232	; 0xe8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	4000a000 	.word	0x4000a000
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020c00 	.word	0x58020c00

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f966 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <FDCAN1_IT0_IRQHandler+0x10>)
 800090e:	f000 ff0b 	bl	8001728 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	24000094 	.word	0x24000094

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f004 f90e 	bl	8004b6c <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24080000 	.word	0x24080000
 800097c:	00000400 	.word	0x00000400
 8000980:	24000198 	.word	0x24000198
 8000984:	240001b0 	.word	0x240001b0

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800098c:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <SystemInit+0xe4>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a36      	ldr	r2, [pc, #216]	; (8000a6c <SystemInit+0xe4>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <SystemInit+0xe8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 030f 	and.w	r3, r3, #15
 80009a4:	2b06      	cmp	r3, #6
 80009a6:	d807      	bhi.n	80009b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <SystemInit+0xe8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 030f 	bic.w	r3, r3, #15
 80009b0:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <SystemInit+0xe8>)
 80009b2:	f043 0307 	orr.w	r3, r3, #7
 80009b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <SystemInit+0xec>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a2d      	ldr	r2, [pc, #180]	; (8000a74 <SystemInit+0xec>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <SystemInit+0xec>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <SystemInit+0xec>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4929      	ldr	r1, [pc, #164]	; (8000a74 <SystemInit+0xec>)
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <SystemInit+0xf0>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <SystemInit+0xe8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <SystemInit+0xe8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f023 030f 	bic.w	r3, r3, #15
 80009ea:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <SystemInit+0xe8>)
 80009ec:	f043 0307 	orr.w	r3, r3, #7
 80009f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <SystemInit+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <SystemInit+0xec>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <SystemInit+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <SystemInit+0xec>)
 8000a06:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <SystemInit+0xf4>)
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <SystemInit+0xec>)
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <SystemInit+0xf8>)
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <SystemInit+0xec>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <SystemInit+0xfc>)
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <SystemInit+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <SystemInit+0xec>)
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <SystemInit+0xfc>)
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <SystemInit+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <SystemInit+0xec>)
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <SystemInit+0xfc>)
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <SystemInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <SystemInit+0xec>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <SystemInit+0xec>)
 8000a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SystemInit+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <SystemInit+0x100>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <SystemInit+0x104>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a52:	d202      	bcs.n	8000a5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <SystemInit+0x108>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SystemInit+0x10c>)
 8000a5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	52002000 	.word	0x52002000
 8000a74:	58024400 	.word	0x58024400
 8000a78:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a7c:	02020200 	.word	0x02020200
 8000a80:	01ff0000 	.word	0x01ff0000
 8000a84:	01010280 	.word	0x01010280
 8000a88:	5c001000 	.word	0x5c001000
 8000a8c:	ffff0000 	.word	0xffff0000
 8000a90:	51008108 	.word	0x51008108
 8000a94:	52004000 	.word	0x52004000

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a9c:	f7ff ff74 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f004 f857 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fc81 	bl	80003d0 <main>
  bx  lr
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ad4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ad8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000adc:	08005574 	.word	0x08005574
  ldr r2, =_sbss
 8000ae0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000ae4:	240001b0 	.word	0x240001b0

08000ae8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC3_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 f98c 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000af8:	f002 fb50 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8000afc:	4602      	mov	r2, r0
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_Init+0x68>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	4913      	ldr	r1, [pc, #76]	; (8000b58 <HAL_Init+0x6c>)
 8000b0a:	5ccb      	ldrb	r3, [r1, r3]
 8000b0c:	f003 031f 	and.w	r3, r3, #31
 8000b10:	fa22 f303 	lsr.w	r3, r2, r3
 8000b14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_Init+0x68>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_Init+0x6c>)
 8000b20:	5cd3      	ldrb	r3, [r2, r3]
 8000b22:	f003 031f 	and.w	r3, r3, #31
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_Init+0x70>)
 8000b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_Init+0x74>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f814 	bl	8000b64 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e002      	b.n	8000b4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b46:	f7ff fe19 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58024400 	.word	0x58024400
 8000b58:	08005518 	.word	0x08005518
 8000b5c:	24000008 	.word	0x24000008
 8000b60:	24000004 	.word	0x24000004

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_InitTick+0x60>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e021      	b.n	8000bbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_InitTick+0x64>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_InitTick+0x60>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f971 	bl	8000e76 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f93b 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x68>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000010 	.word	0x24000010
 8000bc8:	24000004 	.word	0x24000004
 8000bcc:	2400000c 	.word	0x2400000c

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	24000010 	.word	0x24000010
 8000bf4:	2400019c 	.word	0x2400019c

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2400019c 	.word	0x2400019c

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24000010 	.word	0x24000010

08000c58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetREVID+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0c1b      	lsrs	r3, r3, #16
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	5c001000 	.word	0x5c001000

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	05fa0000 	.word	0x05fa0000

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff40 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff33 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa4 	bl	8000dcc <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b098      	sub	sp, #96	; 0x60
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000e98:	4a84      	ldr	r2, [pc, #528]	; (80010ac <HAL_FDCAN_Init+0x21c>)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	224c      	movs	r2, #76	; 0x4c
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fe8c 	bl	8004bc0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e1c6      	b.n	8001240 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7e      	ldr	r2, [pc, #504]	; (80010b0 <HAL_FDCAN_Init+0x220>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d106      	bne.n	8000eca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fc66 	bl	80007b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0210 	bic.w	r2, r2, #16
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef4:	f7ff fe80 	bl	8000bf8 <HAL_GetTick>
 8000ef8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000efa:	e014      	b.n	8000f26 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000efc:	f7ff fe7c 	bl	8000bf8 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d90d      	bls.n	8000f26 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e18c      	b.n	8001240 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d0e3      	beq.n	8000efc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0201 	orr.w	r2, r2, #1
 8000f42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f44:	f7ff fe58 	bl	8000bf8 <HAL_GetTick>
 8000f48:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f4a:	e014      	b.n	8000f76 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f4c:	f7ff fe54 	bl	8000bf8 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b0a      	cmp	r3, #10
 8000f58:	d90d      	bls.n	8000f76 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e164      	b.n	8001240 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0e3      	beq.n	8000f4c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0202 	orr.w	r2, r2, #2
 8000f92:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7c1b      	ldrb	r3, [r3, #16]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	e007      	b.n	8000fbe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	699a      	ldr	r2, [r3, #24]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fbc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7c5b      	ldrb	r3, [r3, #17]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	e007      	b.n	8000fe8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fe6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7c9b      	ldrb	r3, [r3, #18]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ffe:	619a      	str	r2, [r3, #24]
 8001000:	e007      	b.n	8001012 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001010:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	699a      	ldr	r2, [r3, #24]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001036:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0210 	bic.w	r2, r2, #16
 8001046:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0204 	orr.w	r2, r2, #4
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	e030      	b.n	80010c4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d02c      	beq.n	80010c4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d020      	beq.n	80010b4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001080:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 0210 	orr.w	r2, r2, #16
 8001090:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d114      	bne.n	80010c4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	699a      	ldr	r2, [r3, #24]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0220 	orr.w	r2, r2, #32
 80010a8:	619a      	str	r2, [r3, #24]
 80010aa:	e00b      	b.n	80010c4 <HAL_FDCAN_Init+0x234>
 80010ac:	080054cc 	.word	0x080054cc
 80010b0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0220 	orr.w	r2, r2, #32
 80010c2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010d4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010dc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010ec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010f8:	d115      	bne.n	8001126 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	3b01      	subs	r3, #1
 8001106:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001108:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	3b01      	subs	r3, #1
 8001110:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001112:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	3b01      	subs	r3, #1
 800111c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001122:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001124:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114c:	4413      	add	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d011      	beq.n	8001176 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800115a:	f023 0107 	bic.w	r1, r3, #7
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	3360      	adds	r3, #96	; 0x60
 8001166:	443b      	add	r3, r7
 8001168:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d011      	beq.n	80011a2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001186:	f023 0107 	bic.w	r1, r3, #7
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	3360      	adds	r3, #96	; 0x60
 8001192:	443b      	add	r3, r7
 8001194:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d012      	beq.n	80011d0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011b2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	3360      	adds	r3, #96	; 0x60
 80011be:	443b      	add	r3, r7
 80011c0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011c4:	011a      	lsls	r2, r3, #4
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d012      	beq.n	80011fe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011e0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	3360      	adds	r3, #96	; 0x60
 80011ec:	443b      	add	r3, r7
 80011ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011f2:	021a      	lsls	r2, r3, #8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_FDCAN_Init+0x3b8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d107      	bne.n	8001218 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f022 0203 	bic.w	r2, r2, #3
 8001216:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fd83 	bl	8001d3c <FDCAN_CalcultateRamBlockAddresses>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800123c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001240:	4618      	mov	r0, r3
 8001242:	3760      	adds	r7, #96	; 0x60
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	4000a000 	.word	0x4000a000

0800124c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d111      	bne.n	8001284 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2202      	movs	r2, #2
 8001264:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e008      	b.n	8001296 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800128a:	f043 0204 	orr.w	r2, r3, #4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
  }
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d141      	bne.n	800133e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012c2:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012d0:	f043 0220 	orr.w	r2, r3, #32
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e038      	b.n	8001350 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e026      	b.n	8001350 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 fe95 	bl	8002048 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2101      	movs	r1, #1
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800132e:	2201      	movs	r2, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e008      	b.n	8001350 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001344:	f043 0208 	orr.w	r2, r3, #8
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
  }
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001358:	b480      	push	{r7}
 800135a:	b08b      	sub	sp, #44	; 0x2c
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001370:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001372:	7efb      	ldrb	r3, [r7, #27]
 8001374:	2b02      	cmp	r3, #2
 8001376:	f040 814b 	bne.w	8001610 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b40      	cmp	r3, #64	; 0x40
 800137e:	d14d      	bne.n	800141c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001388:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001396:	f043 0220 	orr.w	r2, r3, #32
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e13e      	b.n	8001622 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e12c      	b.n	8001622 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013d0:	0e1b      	lsrs	r3, r3, #24
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10b      	bne.n	80013f2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013e2:	0fdb      	lsrs	r3, r3, #31
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013ec:	d101      	bne.n	80013f2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	69f9      	ldr	r1, [r7, #28]
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	e069      	b.n	80014f0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b41      	cmp	r3, #65	; 0x41
 8001420:	d14d      	bne.n	80014be <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800142a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0ed      	b.n	8001622 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800144e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800145c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0db      	b.n	8001622 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001472:	0e1b      	lsrs	r3, r3, #24
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10b      	bne.n	8001494 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001484:	0fdb      	lsrs	r3, r3, #31
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800148e:	d101      	bne.n	8001494 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	69f9      	ldr	r1, [r7, #28]
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	e018      	b.n	80014f0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d309      	bcc.n	80014dc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014ce:	f043 0220 	orr.w	r2, r3, #32
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0a2      	b.n	8001622 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e005      	b.n	8001520 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	3304      	adds	r3, #4
 800153c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0e1b      	lsrs	r3, r3, #24
 8001572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0fda      	lsrs	r2, r3, #31
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	3304      	adds	r3, #4
 8001588:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
 8001592:	e00a      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	441a      	add	r2, r3
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	440b      	add	r3, r1
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	3301      	adds	r3, #1
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	0c1b      	lsrs	r3, r3, #16
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	461a      	mov	r2, r3
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d3eb      	bcc.n	8001594 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b40      	cmp	r3, #64	; 0x40
 80015c0:	d105      	bne.n	80015ce <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80015cc:	e01e      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b41      	cmp	r3, #65	; 0x41
 80015d2:	d105      	bne.n	80015e0 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80015de:	e015      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b1f      	cmp	r3, #31
 80015e4:	d808      	bhi.n	80015f8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2101      	movs	r1, #1
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80015f6:	e009      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 021f 	and.w	r2, r3, #31
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e008      	b.n	8001622 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001616:	f043 0208 	orr.w	r2, r3, #8
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
  }
}
 8001622:	4618      	mov	r0, r3
 8001624:	372c      	adds	r7, #44	; 0x2c
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	08005528 	.word	0x08005528

08001634 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001646:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d002      	beq.n	8001654 <HAL_FDCAN_ActivateNotification+0x20>
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d155      	bne.n	8001700 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	65da      	str	r2, [r3, #92]	; 0x5c
 8001672:	e014      	b.n	800169e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	4013      	ands	r3, r2
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	d108      	bne.n	8001696 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0202 	orr.w	r2, r2, #2
 8001692:	65da      	str	r2, [r3, #92]	; 0x5c
 8001694:	e003      	b.n	800169e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2203      	movs	r2, #3
 800169c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_FDCAN_ActivateNotification+0xec>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	6553      	str	r3, [r2, #84]	; 0x54
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_FDCAN_ActivateNotification+0xf0>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	0f9b      	lsrs	r3, r3, #30
 80016f6:	490b      	ldr	r1, [pc, #44]	; (8001724 <HAL_FDCAN_ActivateNotification+0xf0>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e008      	b.n	8001712 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001706:	f043 0202 	orr.w	r2, r3, #2
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	3fcfffff 	.word	0x3fcfffff
 8001724:	4000a800 	.word	0x4000a800

08001728 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b096      	sub	sp, #88	; 0x58
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001730:	4b9a      	ldr	r3, [pc, #616]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	079b      	lsls	r3, r3, #30
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001738:	4b98      	ldr	r3, [pc, #608]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	079b      	lsls	r3, r3, #30
 800173e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001740:	4013      	ands	r3, r2
 8001742:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800174e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001758:	4013      	ands	r3, r2
 800175a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001770:	4013      	ands	r3, r2
 8001772:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001788:	4013      	ands	r3, r2
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001792:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017a0:	4013      	ands	r3, r2
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017aa:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017b8:	4013      	ands	r3, r2
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80017cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d010      	beq.n	80017fa <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80017d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00a      	beq.n	80017fa <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ec:	651a      	str	r2, [r3, #80]	; 0x50
 80017ee:	4b6b      	ldr	r3, [pc, #428]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa54 	bl	8001ca2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80017fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fc:	0a9b      	lsrs	r3, r3, #10
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01d      	beq.n	8001842 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	0a9b      	lsrs	r3, r3, #10
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d017      	beq.n	8001842 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001826:	4013      	ands	r3, r2
 8001828:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001832:	651a      	str	r2, [r3, #80]	; 0x50
 8001834:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800183a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fa07 	bl	8001c50 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00d      	beq.n	8001864 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800184e:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <HAL_FDCAN_IRQHandler+0x278>)
 8001850:	400b      	ands	r3, r1
 8001852:	6513      	str	r3, [r2, #80]	; 0x50
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001858:	0f9b      	lsrs	r3, r3, #30
 800185a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800185c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f9c0 	bl	8001be4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <HAL_FDCAN_IRQHandler+0x278>)
 8001872:	400b      	ands	r3, r1
 8001874:	6513      	str	r3, [r2, #80]	; 0x50
 8001876:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800187a:	0f9b      	lsrs	r3, r3, #30
 800187c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800187e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f9ba 	bl	8001bfa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_FDCAN_IRQHandler+0x278>)
 8001894:	400b      	ands	r3, r1
 8001896:	6513      	str	r3, [r2, #80]	; 0x50
 8001898:	4a40      	ldr	r2, [pc, #256]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	0f9b      	lsrs	r3, r3, #30
 800189e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80018a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe fd6c 	bl	8000380 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80018a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_FDCAN_IRQHandler+0x278>)
 80018b6:	400b      	ands	r3, r1
 80018b8:	6513      	str	r3, [r2, #80]	; 0x50
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 80018bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018be:	0f9b      	lsrs	r3, r3, #30
 80018c0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80018c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f9a3 	bl	8001c10 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80018ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018cc:	0adb      	lsrs	r3, r3, #11
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80018d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d8:	0adb      	lsrs	r3, r3, #11
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00a      	beq.n	80018f8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ea:	651a      	str	r2, [r3, #80]	; 0x50
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f997 	bl	8001c26 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	0a5b      	lsrs	r3, r3, #9
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01d      	beq.n	8001940 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	4013      	ands	r3, r2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	651a      	str	r2, [r3, #80]	; 0x50
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f97d 	bl	8001c3a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	0cdb      	lsrs	r3, r3, #19
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d010      	beq.n	800196e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800194c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194e:	0cdb      	lsrs	r3, r3, #19
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001960:	651a      	str	r2, [r3, #80]	; 0x50
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f97c 	bl	8001c66 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800196e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d010      	beq.n	80019a8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800198e:	651a      	str	r2, [r3, #80]	; 0x50
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HAL_FDCAN_IRQHandler+0x274>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	e004      	b.n	80019a4 <HAL_FDCAN_IRQHandler+0x27c>
 800199a:	bf00      	nop
 800199c:	4000a800 	.word	0x4000a800
 80019a0:	3fcfffff 	.word	0x3fcfffff
 80019a4:	f000 f969 	bl	8001c7a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80019a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d010      	beq.n	80019d6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80019b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f95c 	bl	8001c8e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80019d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d8:	0c5b      	lsrs	r3, r3, #17
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d015      	beq.n	8001a0e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	0c5b      	lsrs	r3, r3, #17
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00f      	beq.n	8001a0e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f6:	651a      	str	r2, [r3, #80]	; 0x50
 80019f8:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a1a:	4b70      	ldr	r3, [pc, #448]	; (8001bdc <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	6513      	str	r3, [r2, #80]	; 0x50
 8001a20:	4a6d      	ldr	r2, [pc, #436]	; (8001bd8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a24:	0f9b      	lsrs	r3, r3, #30
 8001a26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f94d 	bl	8001cca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d011      	beq.n	8001a5a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a3c:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a3e:	400b      	ands	r3, r1
 8001a40:	6513      	str	r3, [r2, #80]	; 0x50
 8001a42:	4a65      	ldr	r2, [pc, #404]	; (8001bd8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	0f9b      	lsrs	r3, r3, #30
 8001a48:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a60      	ldr	r2, [pc, #384]	; (8001be0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	f040 80ac 	bne.w	8001bbe <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a4 	beq.w	8001bbe <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	4013      	ands	r3, r2
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001ac8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001ae0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8e6 	bl	8001ce0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b20:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8e6 	bl	8001cf6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01a      	beq.n	8001b6c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d014      	beq.n	8001b6c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8d0 	bl	8001d0c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8d1 	bl	8001d24 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f874 	bl	8001cb6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3758      	adds	r7, #88	; 0x58
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	4000a800 	.word	0x4000a800
 8001bdc:	3fcfffff 	.word	0x3fcfffff
 8001be0:	4000a000 	.word	0x4000a000

08001be4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d52:	4ba7      	ldr	r3, [pc, #668]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	0091      	lsls	r1, r2, #2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	430b      	orrs	r3, r1
 8001d60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d6c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	4413      	add	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d92:	4b97      	ldr	r3, [pc, #604]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	0091      	lsls	r1, r2, #2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001dd4:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	0091      	lsls	r1, r2, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e1c:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	0091      	lsls	r1, r2, #2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e36:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4413      	add	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e64:	4b62      	ldr	r3, [pc, #392]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	0091      	lsls	r1, r2, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	4413      	add	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	0091      	lsls	r1, r2, #2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eaa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	0091      	lsls	r1, r2, #2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001eec:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f08:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f10:	061a      	lsls	r2, r3, #24
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f22:	4413      	add	r3, r2
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	441a      	add	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	441a      	add	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d915      	bls.n	8002018 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fec:	e006      	b.n	8001ffc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fee:	bf00      	nop
 8001ff0:	ffff0003 	.word	0xffff0003
 8001ff4:	10002b00 	.word	0x10002b00
 8001ff8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e010      	b.n	800203a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e005      	b.n	800202c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3304      	adds	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3f3      	bcc.n	8002020 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002066:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800206e:	4313      	orrs	r3, r2
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e00a      	b.n	800208a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800207c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002082:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002088:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002094:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800209a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020a0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3304      	adds	r3, #4
 80020ca:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	3304      	adds	r3, #4
 80020d6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e020      	b.n	8002120 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3303      	adds	r3, #3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3302      	adds	r3, #2
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	440b      	add	r3, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020f6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	440b      	add	r3, r1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002104:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	440a      	add	r2, r1
 800210c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800210e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	3304      	adds	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3304      	adds	r3, #4
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	4a06      	ldr	r2, [pc, #24]	; (8002140 <FDCAN_CopyMessageToRAM+0xf8>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4293      	cmp	r3, r2
 8002130:	d3d5      	bcc.n	80020de <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	08005528 	.word	0x08005528

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <HAL_GPIO_Init+0x234>)
 8002154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002156:	e194      	b.n	8002482 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8186 	beq.w	800247c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d005      	beq.n	8002188 <HAL_GPIO_Init+0x44>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d130      	bne.n	80021ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021be:	2201      	movs	r2, #1
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 0201 	and.w	r2, r3, #1
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d017      	beq.n	8002226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d123      	bne.n	800227a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	69b9      	ldr	r1, [r7, #24]
 8002276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80e0 	beq.w	800247c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_GPIO_Init+0x238>)
 80022be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022c2:	4a2e      	ldr	r2, [pc, #184]	; (800237c <HAL_GPIO_Init+0x238>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_GPIO_Init+0x238>)
 80022ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_GPIO_Init+0x23c>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_GPIO_Init+0x240>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d052      	beq.n	80023ac <HAL_GPIO_Init+0x268>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_GPIO_Init+0x244>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_GPIO_Init+0x22e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_GPIO_Init+0x248>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x22a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_GPIO_Init+0x24c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x226>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_GPIO_Init+0x250>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x222>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_GPIO_Init+0x254>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x21e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_GPIO_Init+0x258>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x21a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_GPIO_Init+0x25c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x216>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_GPIO_Init+0x260>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x212>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_GPIO_Init+0x264>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x20e>
 800234e:	2309      	movs	r3, #9
 8002350:	e02d      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002352:	230a      	movs	r3, #10
 8002354:	e02b      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002356:	2308      	movs	r3, #8
 8002358:	e029      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800235a:	2307      	movs	r3, #7
 800235c:	e027      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800235e:	2306      	movs	r3, #6
 8002360:	e025      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002362:	2305      	movs	r3, #5
 8002364:	e023      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002366:	2304      	movs	r3, #4
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800236a:	2303      	movs	r3, #3
 800236c:	e01f      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800236e:	2302      	movs	r3, #2
 8002370:	e01d      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002372:	2301      	movs	r3, #1
 8002374:	e01b      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002376:	bf00      	nop
 8002378:	58000080 	.word	0x58000080
 800237c:	58024400 	.word	0x58024400
 8002380:	58000400 	.word	0x58000400
 8002384:	58020000 	.word	0x58020000
 8002388:	58020400 	.word	0x58020400
 800238c:	58020800 	.word	0x58020800
 8002390:	58020c00 	.word	0x58020c00
 8002394:	58021000 	.word	0x58021000
 8002398:	58021400 	.word	0x58021400
 800239c:	58021800 	.word	0x58021800
 80023a0:	58021c00 	.word	0x58021c00
 80023a4:	58022000 	.word	0x58022000
 80023a8:	58022400 	.word	0x58022400
 80023ac:	2300      	movs	r3, #0
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_GPIO_Init+0x35c>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f ae63 	bne.w	8002158 <HAL_GPIO_Init+0x14>
  }
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58000400 	.word	0x58000400

080024a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e001      	b.n	80024c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_PWREx_ConfigSupply+0x70>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00a      	beq.n	8002532 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_PWREx_ConfigSupply+0x70>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e01f      	b.n	800256e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e01d      	b.n	800256e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_PWREx_ConfigSupply+0x70>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	490f      	ldr	r1, [pc, #60]	; (8002578 <HAL_PWREx_ConfigSupply+0x70>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4313      	orrs	r3, r2
 8002540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002542:	f7fe fb59 	bl	8000bf8 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002548:	e009      	b.n	800255e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800254a:	f7fe fb55 	bl	8000bf8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002558:	d901      	bls.n	800255e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e007      	b.n	800256e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_PWREx_ConfigSupply+0x70>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d1ee      	bne.n	800254a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	58024800 	.word	0x58024800

0800257c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f000 bc48 	b.w	8002e20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8088 	beq.w	80026ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a8:	4b96      	ldr	r3, [pc, #600]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d007      	beq.n	80025c4 <HAL_RCC_OscConfig+0x48>
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	2b18      	cmp	r3, #24
 80025b8:	d111      	bne.n	80025de <HAL_RCC_OscConfig+0x62>
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4b8f      	ldr	r3, [pc, #572]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d06d      	beq.n	80026ac <HAL_RCC_OscConfig+0x130>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d169      	bne.n	80026ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f000 bc21 	b.w	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x7a>
 80025e8:	4b86      	ldr	r3, [pc, #536]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a85      	ldr	r2, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e02e      	b.n	8002654 <HAL_RCC_OscConfig+0xd8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x9c>
 80025fe:	4b81      	ldr	r3, [pc, #516]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a80      	ldr	r2, [pc, #512]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7d      	ldr	r2, [pc, #500]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xd8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0xc0>
 8002622:	4b78      	ldr	r3, [pc, #480]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a77      	ldr	r2, [pc, #476]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b75      	ldr	r3, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a74      	ldr	r2, [pc, #464]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xd8>
 800263c:	4b71      	ldr	r3, [pc, #452]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a70      	ldr	r2, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6d      	ldr	r2, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe facc 	bl	8000bf8 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fac8 	bl	8000bf8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e3d4      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xe8>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fab8 	bl	8000bf8 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fab4 	bl	8000bf8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e3c0      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269e:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x110>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80ca 	beq.w	8002850 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026bc:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c6:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_RCC_OscConfig+0x166>
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b18      	cmp	r3, #24
 80026d6:	d156      	bne.n	8002786 <HAL_RCC_OscConfig+0x20a>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d151      	bne.n	8002786 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x17e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e392      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026fa:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0219 	bic.w	r2, r3, #25
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	493f      	ldr	r1, [pc, #252]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fa74 	bl	8000bf8 <HAL_GetTick>
 8002710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fa70 	bl	8000bf8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e37c      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	f7fe fa91 	bl	8000c58 <HAL_GetREVID>
 8002736:	4603      	mov	r3, r0
 8002738:	f241 0203 	movw	r2, #4099	; 0x1003
 800273c:	4293      	cmp	r3, r2
 800273e:	d817      	bhi.n	8002770 <HAL_RCC_OscConfig+0x1f4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d108      	bne.n	800275a <HAL_RCC_OscConfig+0x1de>
 8002748:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002750:	4a2c      	ldr	r2, [pc, #176]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002758:	e07a      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	031b      	lsls	r3, r3, #12
 8002768:	4926      	ldr	r1, [pc, #152]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276e:	e06f      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	4921      	ldr	r1, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002784:	e064      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d047      	beq.n	800281e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0219 	bic.w	r2, r3, #25
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	491a      	ldr	r1, [pc, #104]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fa2a 	bl	8000bf8 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fa26 	bl	8000bf8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e332      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	f7fe fa47 	bl	8000c58 <HAL_GetREVID>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d819      	bhi.n	8002808 <HAL_RCC_OscConfig+0x28c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d108      	bne.n	80027ee <HAL_RCC_OscConfig+0x272>
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	6053      	str	r3, [r2, #4]
 80027ec:	e030      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	031b      	lsls	r3, r3, #12
 80027fc:	4901      	ldr	r1, [pc, #4]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
 8002802:	e025      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
 8002804:	58024400 	.word	0x58024400
 8002808:	4b9a      	ldr	r3, [pc, #616]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4997      	ldr	r1, [pc, #604]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e018      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b95      	ldr	r3, [pc, #596]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a94      	ldr	r2, [pc, #592]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe f9e5 	bl	8000bf8 <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002832:	f7fe f9e1 	bl	8000bf8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e2ed      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002844:	4b8b      	ldr	r3, [pc, #556]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a9 	beq.w	80029b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002866:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002868:	4b82      	ldr	r3, [pc, #520]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0x308>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b18      	cmp	r3, #24
 8002878:	d13a      	bne.n	80028f0 <HAL_RCC_OscConfig+0x374>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d135      	bne.n	80028f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002884:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_OscConfig+0x320>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e2c1      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289c:	f7fe f9dc 	bl	8000c58 <HAL_GetREVID>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d817      	bhi.n	80028da <HAL_RCC_OscConfig+0x35e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_OscConfig+0x348>
 80028b2:	4b70      	ldr	r3, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028ba:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c2:	e075      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c4:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	069b      	lsls	r3, r3, #26
 80028d2:	4968      	ldr	r1, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d8:	e06a      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028da:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	4962      	ldr	r1, [pc, #392]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ee:	e05f      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d042      	beq.n	800297e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028f8:	4b5e      	ldr	r3, [pc, #376]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe f978 	bl	8000bf8 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800290c:	f7fe f974 	bl	8000bf8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e280      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291e:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800292a:	f7fe f995 	bl	8000c58 <HAL_GetREVID>
 800292e:	4603      	mov	r3, r0
 8002930:	f241 0203 	movw	r2, #4099	; 0x1003
 8002934:	4293      	cmp	r3, r2
 8002936:	d817      	bhi.n	8002968 <HAL_RCC_OscConfig+0x3ec>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	2b20      	cmp	r3, #32
 800293e:	d108      	bne.n	8002952 <HAL_RCC_OscConfig+0x3d6>
 8002940:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800294a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800294e:	6053      	str	r3, [r2, #4]
 8002950:	e02e      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
 8002952:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	069b      	lsls	r3, r3, #26
 8002960:	4944      	ldr	r1, [pc, #272]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e023      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
 8002968:	4b42      	ldr	r3, [pc, #264]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	493f      	ldr	r1, [pc, #252]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a3c      	ldr	r2, [pc, #240]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe f935 	bl	8000bf8 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002992:	f7fe f931 	bl	8000bf8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e23d      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d036      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d019      	beq.n	80029f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe f912 	bl	8000bf8 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe f90e 	bl	8000bf8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e21a      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x45c>
 80029f6:	e018      	b.n	8002a2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe f8f8 	bl	8000bf8 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe f8f4 	bl	8000bf8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e200      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d039      	beq.n	8002aaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe f8d5 	bl	8000bf8 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a52:	f7fe f8d1 	bl	8000bf8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1dd      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4d6>
 8002a70:	e01b      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
 8002a72:	bf00      	nop
 8002a74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a78:	4b9b      	ldr	r3, [pc, #620]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a9a      	ldr	r2, [pc, #616]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a84:	f7fe f8b8 	bl	8000bf8 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7fe f8b4 	bl	8000bf8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1c0      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a9e:	4b92      	ldr	r3, [pc, #584]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8081 	beq.w	8002bba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab8:	4b8c      	ldr	r3, [pc, #560]	; (8002cec <HAL_RCC_OscConfig+0x770>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a8b      	ldr	r2, [pc, #556]	; (8002cec <HAL_RCC_OscConfig+0x770>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe f898 	bl	8000bf8 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe f894 	bl	8000bf8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1a0      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ade:	4b83      	ldr	r3, [pc, #524]	; (8002cec <HAL_RCC_OscConfig+0x770>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x584>
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	e02d      	b.n	8002b5c <HAL_RCC_OscConfig+0x5e0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5a6>
 8002b08:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	e01c      	b.n	8002b5c <HAL_RCC_OscConfig+0x5e0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c8>
 8002b2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	4b6c      	ldr	r3, [pc, #432]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a6b      	ldr	r2, [pc, #428]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0x5e0>
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a64      	ldr	r2, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe f848 	bl	8000bf8 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe f844 	bl	8000bf8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e14e      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ee      	beq.n	8002b6c <HAL_RCC_OscConfig+0x5f0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe f832 	bl	8000bf8 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe f82e 	bl	8000bf8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e138      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bae:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ee      	bne.n	8002b98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 812d 	beq.w	8002e1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bcc:	2b18      	cmp	r3, #24
 8002bce:	f000 80bd 	beq.w	8002d4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	f040 809e 	bne.w	8002d18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe f806 	bl	8000bf8 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe f802 	bl	8000bf8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e10e      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x774>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4931      	ldr	r1, [pc, #196]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	628b      	str	r3, [r1, #40]	; 0x28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	3b01      	subs	r3, #1
 8002c38:	025b      	lsls	r3, r3, #9
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	3b01      	subs	r3, #1
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	3b01      	subs	r3, #1
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c58:	4923      	ldr	r1, [pc, #140]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_RCC_OscConfig+0x778>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f023 020c 	bic.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4917      	ldr	r1, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f023 0202 	bic.w	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	4912      	ldr	r1, [pc, #72]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fd ff8b 	bl	8000bf8 <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce4:	e011      	b.n	8002d0a <HAL_RCC_OscConfig+0x78e>
 8002ce6:	bf00      	nop
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58024800 	.word	0x58024800
 8002cf0:	fffffc0c 	.word	0xfffffc0c
 8002cf4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fd ff7e 	bl	8000bf8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e08a      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x77c>
 8002d16:	e082      	b.n	8002e1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a42      	ldr	r2, [pc, #264]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fd ff68 	bl	8000bf8 <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fd ff64 	bl	8000bf8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e070      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x7b0>
 8002d4a:	e068      	b.n	8002e1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d031      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d12a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d122      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0a5b      	lsrs	r3, r3, #9
 8002d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d108      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e02b      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d01f      	beq.n	8002e1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dea:	f7fd ff05 	bl	8000bf8 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002df0:	bf00      	nop
 8002df2:	f7fd ff01 	bl	8000bf8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d0f9      	beq.n	8002df2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_RCC_OscConfig+0x8b0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	4906      	ldr	r1, [pc, #24]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	ffff0007 	.word	0xffff0007

08002e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e19c      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b8a      	ldr	r3, [pc, #552]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b87      	ldr	r3, [pc, #540]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	4985      	ldr	r1, [pc, #532]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e184      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e90:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4975      	ldr	r1, [pc, #468]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d908      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	496a      	ldr	r1, [pc, #424]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	4b64      	ldr	r3, [pc, #400]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eec:	4b61      	ldr	r3, [pc, #388]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	495e      	ldr	r1, [pc, #376]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f1a:	4b56      	ldr	r3, [pc, #344]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4953      	ldr	r1, [pc, #332]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4b4d      	ldr	r3, [pc, #308]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d908      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f023 020f 	bic.w	r2, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4947      	ldr	r1, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d055      	beq.n	8003012 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4940      	ldr	r1, [pc, #256]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f80:	4b3c      	ldr	r3, [pc, #240]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d121      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0f6      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f98:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d115      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0ea      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0de      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d6      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f023 0207 	bic.w	r2, r3, #7
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4925      	ldr	r1, [pc, #148]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe2:	f7fd fe09 	bl	8000bf8 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fea:	f7fd fe05 	bl	8000bf8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0be      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	429a      	cmp	r2, r3
 8003010:	d1eb      	bne.n	8002fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	429a      	cmp	r2, r3
 800302c:	d208      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f023 020f 	bic.w	r2, r3, #15
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_RCC_ClockConfig+0x244>)
 800303c:	4313      	orrs	r3, r2
 800303e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d214      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	4906      	ldr	r1, [pc, #24]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e086      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
 8003070:	52002000 	.word	0x52002000
 8003074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003090:	429a      	cmp	r2, r3
 8003092:	d208      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003094:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	4939      	ldr	r1, [pc, #228]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	492e      	ldr	r1, [pc, #184]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d208      	bcs.n	8003102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4922      	ldr	r1, [pc, #136]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800311a:	429a      	cmp	r2, r3
 800311c:	d208      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4917      	ldr	r1, [pc, #92]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 800312c:	4313      	orrs	r3, r2
 800312e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003130:	f000 f834 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4912      	ldr	r1, [pc, #72]	; (800318c <HAL_RCC_ClockConfig+0x35c>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4a0d      	ldr	r2, [pc, #52]	; (800318c <HAL_RCC_ClockConfig+0x35c>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x360>)
 8003166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <HAL_RCC_ClockConfig+0x364>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x368>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fcf6 	bl	8000b64 <HAL_InitTick>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	58024400 	.word	0x58024400
 800318c:	08005518 	.word	0x08005518
 8003190:	24000008 	.word	0x24000008
 8003194:	24000004 	.word	0x24000004
 8003198:	2400000c 	.word	0x2400000c

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a2:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031aa:	2b18      	cmp	r3, #24
 80031ac:	f200 8155 	bhi.w	800345a <HAL_RCC_GetSysClockFreq+0x2be>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	0800321d 	.word	0x0800321d
 80031bc:	0800345b 	.word	0x0800345b
 80031c0:	0800345b 	.word	0x0800345b
 80031c4:	0800345b 	.word	0x0800345b
 80031c8:	0800345b 	.word	0x0800345b
 80031cc:	0800345b 	.word	0x0800345b
 80031d0:	0800345b 	.word	0x0800345b
 80031d4:	0800345b 	.word	0x0800345b
 80031d8:	08003243 	.word	0x08003243
 80031dc:	0800345b 	.word	0x0800345b
 80031e0:	0800345b 	.word	0x0800345b
 80031e4:	0800345b 	.word	0x0800345b
 80031e8:	0800345b 	.word	0x0800345b
 80031ec:	0800345b 	.word	0x0800345b
 80031f0:	0800345b 	.word	0x0800345b
 80031f4:	0800345b 	.word	0x0800345b
 80031f8:	08003249 	.word	0x08003249
 80031fc:	0800345b 	.word	0x0800345b
 8003200:	0800345b 	.word	0x0800345b
 8003204:	0800345b 	.word	0x0800345b
 8003208:	0800345b 	.word	0x0800345b
 800320c:	0800345b 	.word	0x0800345b
 8003210:	0800345b 	.word	0x0800345b
 8003214:	0800345b 	.word	0x0800345b
 8003218:	0800324f 	.word	0x0800324f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321c:	4b94      	ldr	r3, [pc, #592]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003228:	4b91      	ldr	r3, [pc, #580]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	4a90      	ldr	r2, [pc, #576]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800323a:	e111      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800323c:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800323e:	61bb      	str	r3, [r7, #24]
      break;
 8003240:	e10e      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003242:	4b8d      	ldr	r3, [pc, #564]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003244:	61bb      	str	r3, [r7, #24]
      break;
 8003246:	e10b      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800324a:	61bb      	str	r3, [r7, #24]
      break;
 800324c:	e108      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003258:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003264:	4b82      	ldr	r3, [pc, #520]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800326e:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80e1 	beq.w	8003454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b02      	cmp	r3, #2
 8003296:	f000 8083 	beq.w	80033a0 <HAL_RCC_GetSysClockFreq+0x204>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b02      	cmp	r3, #2
 800329e:	f200 80a1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x248>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x114>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d056      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032ae:	e099      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02d      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	4a6b      	ldr	r2, [pc, #428]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003316:	e087      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	e065      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339e:	e043      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800348c <HAL_RCC_GetSysClockFreq+0x2f0>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033e2:	e021      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003432:	3301      	adds	r3, #1
 8003434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003440:	edd7 6a07 	vldr	s13, [r7, #28]
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 3a90 	vmov	r3, s15
 8003450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003452:	e005      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
      break;
 8003458:	e002      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800345c:	61bb      	str	r3, [r7, #24]
      break;
 800345e:	bf00      	nop
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
 8003474:	03d09000 	.word	0x03d09000
 8003478:	003d0900 	.word	0x003d0900
 800347c:	017d7840 	.word	0x017d7840
 8003480:	46000000 	.word	0x46000000
 8003484:	4c742400 	.word	0x4c742400
 8003488:	4a742400 	.word	0x4a742400
 800348c:	4bbebc20 	.word	0x4bbebc20

08003490 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b0ca      	sub	sp, #296	; 0x128
 8003496:	af00      	add	r7, sp, #0
 8003498:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80034b4:	2500      	movs	r5, #0
 80034b6:	ea54 0305 	orrs.w	r3, r4, r5
 80034ba:	d049      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034c6:	d02f      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034cc:	d828      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d2:	d01a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d8:	d822      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e2:	d007      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034e4:	e01c      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e6:	4bb8      	ldr	r3, [pc, #736]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4ab7      	ldr	r2, [pc, #732]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034f2:	e01a      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	3308      	adds	r3, #8
 80034fa:	2102      	movs	r1, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f9d1 	bl	80048a4 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003508:	e00f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350e:	3328      	adds	r3, #40	; 0x28
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fa78 	bl	8004a08 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003532:	4ba5      	ldr	r3, [pc, #660]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003540:	4aa1      	ldr	r2, [pc, #644]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003542:	430b      	orrs	r3, r1
 8003544:	6513      	str	r3, [r2, #80]	; 0x50
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800354c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800355c:	f04f 0900 	mov.w	r9, #0
 8003560:	ea58 0309 	orrs.w	r3, r8, r9
 8003564:	d047      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	2b04      	cmp	r3, #4
 800356e:	d82a      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003570:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	0800358d 	.word	0x0800358d
 800357c:	0800359b 	.word	0x0800359b
 8003580:	080035b1 	.word	0x080035b1
 8003584:	080035cf 	.word	0x080035cf
 8003588:	080035cf 	.word	0x080035cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358c:	4b8e      	ldr	r3, [pc, #568]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4a8d      	ldr	r2, [pc, #564]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003598:	e01a      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359e:	3308      	adds	r3, #8
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f97e 	bl	80048a4 <RCCEx_PLL2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ae:	e00f      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b4:	3328      	adds	r3, #40	; 0x28
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fa25 	bl	8004a08 <RCCEx_PLL3_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c4:	e004      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d8:	4b7b      	ldr	r3, [pc, #492]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	f023 0107 	bic.w	r1, r3, #7
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	4a78      	ldr	r2, [pc, #480]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6513      	str	r3, [r2, #80]	; 0x50
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003602:	f04f 0b00 	mov.w	fp, #0
 8003606:	ea5a 030b 	orrs.w	r3, sl, fp
 800360a:	d04c      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d030      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361c:	d829      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800361e:	2bc0      	cmp	r3, #192	; 0xc0
 8003620:	d02d      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003622:	2bc0      	cmp	r3, #192	; 0xc0
 8003624:	d825      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d018      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d821      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d007      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003636:	e01c      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003638:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a62      	ldr	r2, [pc, #392]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003644:	e01c      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364a:	3308      	adds	r3, #8
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f928 	bl	80048a4 <RCCEx_PLL2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003660:	3328      	adds	r3, #40	; 0x28
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f9cf 	bl	8004a08 <RCCEx_PLL3_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003670:	e006      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003678:	e002      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800367e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003688:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	4a4c      	ldr	r2, [pc, #304]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003698:	430b      	orrs	r3, r1
 800369a:	6513      	str	r3, [r2, #80]	; 0x50
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80036bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80036c0:	460b      	mov	r3, r1
 80036c2:	4313      	orrs	r3, r2
 80036c4:	d053      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d2:	d035      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d8:	d82e      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036de:	d031      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036e4:	d828      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d01a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d822      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036fa:	d007      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036fc:	e01c      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a31      	ldr	r2, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800370a:	e01c      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003710:	3308      	adds	r3, #8
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f8c5 	bl	80048a4 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003720:	e011      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	3328      	adds	r3, #40	; 0x28
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f96c 	bl	8004a08 <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003736:	e006      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800373e:	e002      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6593      	str	r3, [r2, #88]	; 0x58
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800376a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800377a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003784:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d056      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800379a:	d038      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d831      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037a6:	d034      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037ac:	d82b      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b2:	d01d      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b8:	d825      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037c4:	e01f      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037cc:	4ba2      	ldr	r3, [pc, #648]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4aa1      	ldr	r2, [pc, #644]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d8:	e01c      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	3308      	adds	r3, #8
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 f85e 	bl	80048a4 <RCCEx_PLL2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037ee:	e011      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f4:	3328      	adds	r3, #40	; 0x28
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 f905 	bl	8004a08 <RCCEx_PLL3_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800381c:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800382c:	4a8a      	ldr	r2, [pc, #552]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6593      	str	r3, [r2, #88]	; 0x58
 8003832:	e003      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003852:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d03a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	2b30      	cmp	r3, #48	; 0x30
 8003864:	d01f      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d819      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800386a:	2b20      	cmp	r3, #32
 800386c:	d00c      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d815      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d019      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003876:	2b10      	cmp	r3, #16
 8003878:	d111      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387a:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4a76      	ldr	r2, [pc, #472]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388c:	3308      	adds	r3, #8
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f807 	bl	80048a4 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038b4:	4b68      	ldr	r3, [pc, #416]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c8:	e003      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80038de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d051      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fc:	d035      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003902:	d82e      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003904:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003908:	d031      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800390a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390e:	d828      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d01a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d822      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d007      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003926:	e01c      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a4a      	ldr	r2, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003934:	e01c      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393a:	3308      	adds	r3, #8
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 ffb0 	bl	80048a4 <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800394a:	e011      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003950:	3328      	adds	r3, #40	; 0x28
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f857 	bl	8004a08 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800396e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003978:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003988:	430b      	orrs	r3, r1
 800398a:	6513      	str	r3, [r2, #80]	; 0x50
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80039b0:	460b      	mov	r3, r1
 80039b2:	4313      	orrs	r3, r2
 80039b4:	d056      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d033      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c6:	d82c      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039cc:	d02f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d2:	d826      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d8:	d02b      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039de:	d820      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d012      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ea:	d81a      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d022      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d115      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	3308      	adds	r3, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 ff50 	bl	80048a4 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a0a:	e015      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	3328      	adds	r3, #40	; 0x28
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fff7 	bl	8004a08 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a20:	e00a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a28:	e006      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4e:	4a02      	ldr	r2, [pc, #8]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6513      	str	r3, [r2, #80]	; 0x50
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a56:	bf00      	nop
 8003a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d055      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a90:	d033      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a96:	d82c      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d02f      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d826      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aa8:	d02b      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aae:	d820      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab4:	d012      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d81a      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aca:	3308      	adds	r3, #8
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fee8 	bl	80048a4 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ada:	e015      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae0:	3328      	adds	r3, #40	; 0x28
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ff8f 	bl	8004a08 <RCCEx_PLL3_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b10:	4ba3      	ldr	r3, [pc, #652]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b20:	4a9f      	ldr	r2, [pc, #636]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6593      	str	r3, [r2, #88]	; 0x58
 8003b26:	e003      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	d037      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5a:	d00e      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d816      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6a:	d111      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6c:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	4a8b      	ldr	r2, [pc, #556]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b78:	e00f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7e:	3308      	adds	r3, #8
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fe8e 	bl	80048a4 <RCCEx_PLL2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b8e:	e004      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b96:	e000      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ba2:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a7b      	ldr	r2, [pc, #492]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8003bb6:	e003      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003bd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d039      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d81c      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c2d 	.word	0x08003c2d
 8003bf4:	08003c01 	.word	0x08003c01
 8003bf8:	08003c0f 	.word	0x08003c0f
 8003bfc:	08003c2d 	.word	0x08003c2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a66      	ldr	r2, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c0c:	e00f      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c12:	3308      	adds	r3, #8
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fe44 	bl	80048a4 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c36:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	f023 0103 	bic.w	r1, r3, #3
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	4a56      	ldr	r2, [pc, #344]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c4a:	e003      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f000 809f 	beq.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c76:	4b4b      	ldr	r3, [pc, #300]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c82:	f7fc ffb9 	bl	8000bf8 <HAL_GetTick>
 8003c86:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8c:	f7fc ffb4 	bl	8000bf8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b64      	cmp	r3, #100	; 0x64
 8003c9a:	d903      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ca2:	e005      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ed      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d179      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cc4:	4053      	eors	r3, r2
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d015      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cce:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cda:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a30      	ldr	r2, [pc, #192]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce6:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d118      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fc ff76 	bl	8000bf8 <HAL_GetTick>
 8003d0c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d10:	e00d      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fc ff71 	bl	8000bf8 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d903      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003d2c:	e005      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0eb      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d129      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d10e      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d64:	091a      	lsrs	r2, r3, #4
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6113      	str	r3, [r2, #16]
 8003d70:	e005      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d7c:	6113      	str	r3, [r2, #16]
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8e:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6713      	str	r3, [r2, #112]	; 0x70
 8003d94:	e00e      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003d9e:	e009      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003da0:	58024400 	.word	0x58024400
 8003da4:	58024800 	.word	0x58024800
 8003da8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 0301 	and.w	r3, r2, #1
 8003dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f000 8089 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	2b28      	cmp	r3, #40	; 0x28
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003ec1 	.word	0x08003ec1
 8003dec:	08003eb9 	.word	0x08003eb9
 8003df0:	08003eb9 	.word	0x08003eb9
 8003df4:	08003eb9 	.word	0x08003eb9
 8003df8:	08003eb9 	.word	0x08003eb9
 8003dfc:	08003eb9 	.word	0x08003eb9
 8003e00:	08003eb9 	.word	0x08003eb9
 8003e04:	08003eb9 	.word	0x08003eb9
 8003e08:	08003e8d 	.word	0x08003e8d
 8003e0c:	08003eb9 	.word	0x08003eb9
 8003e10:	08003eb9 	.word	0x08003eb9
 8003e14:	08003eb9 	.word	0x08003eb9
 8003e18:	08003eb9 	.word	0x08003eb9
 8003e1c:	08003eb9 	.word	0x08003eb9
 8003e20:	08003eb9 	.word	0x08003eb9
 8003e24:	08003eb9 	.word	0x08003eb9
 8003e28:	08003ea3 	.word	0x08003ea3
 8003e2c:	08003eb9 	.word	0x08003eb9
 8003e30:	08003eb9 	.word	0x08003eb9
 8003e34:	08003eb9 	.word	0x08003eb9
 8003e38:	08003eb9 	.word	0x08003eb9
 8003e3c:	08003eb9 	.word	0x08003eb9
 8003e40:	08003eb9 	.word	0x08003eb9
 8003e44:	08003eb9 	.word	0x08003eb9
 8003e48:	08003ec1 	.word	0x08003ec1
 8003e4c:	08003eb9 	.word	0x08003eb9
 8003e50:	08003eb9 	.word	0x08003eb9
 8003e54:	08003eb9 	.word	0x08003eb9
 8003e58:	08003eb9 	.word	0x08003eb9
 8003e5c:	08003eb9 	.word	0x08003eb9
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003eb9 	.word	0x08003eb9
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003eb9 	.word	0x08003eb9
 8003e88:	08003ec1 	.word	0x08003ec1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e90:	3308      	adds	r3, #8
 8003e92:	2101      	movs	r1, #1
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fd05 	bl	80048a4 <RCCEx_PLL2_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ea0:	e00f      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea6:	3328      	adds	r3, #40	; 0x28
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fdac 	bl	8004a08 <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eca:	4bbf      	ldr	r3, [pc, #764]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed8:	4abb      	ldr	r2, [pc, #748]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6553      	str	r3, [r2, #84]	; 0x54
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 0302 	and.w	r3, r2, #2
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003efe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d041      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0e:	2b05      	cmp	r3, #5
 8003f10:	d824      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f65 	.word	0x08003f65
 8003f1c:	08003f31 	.word	0x08003f31
 8003f20:	08003f47 	.word	0x08003f47
 8003f24:	08003f65 	.word	0x08003f65
 8003f28:	08003f65 	.word	0x08003f65
 8003f2c:	08003f65 	.word	0x08003f65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f34:	3308      	adds	r3, #8
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fcb3 	bl	80048a4 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	3328      	adds	r3, #40	; 0x28
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fd5a 	bl	8004a08 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f6e:	4b96      	ldr	r3, [pc, #600]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f023 0107 	bic.w	r1, r3, #7
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7c:	4a92      	ldr	r2, [pc, #584]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	6553      	str	r3, [r2, #84]	; 0x54
 8003f82:	e003      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f002 0304 	and.w	r3, r2, #4
 8003f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d044      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d825      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	0800400d 	.word	0x0800400d
 8003fc4:	08003fd9 	.word	0x08003fd9
 8003fc8:	08003fef 	.word	0x08003fef
 8003fcc:	0800400d 	.word	0x0800400d
 8003fd0:	0800400d 	.word	0x0800400d
 8003fd4:	0800400d 	.word	0x0800400d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	3308      	adds	r3, #8
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fc5f 	bl	80048a4 <RCCEx_PLL2_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fec:	e00f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	3328      	adds	r3, #40	; 0x28
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd06 	bl	8004a08 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004016:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f023 0107 	bic.w	r1, r3, #7
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004026:	4a68      	ldr	r2, [pc, #416]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6593      	str	r3, [r2, #88]	; 0x58
 800402c:	e003      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f002 0320 	and.w	r3, r2, #32
 8004042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800404c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004050:	460b      	mov	r3, r1
 8004052:	4313      	orrs	r3, r2
 8004054:	d055      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004062:	d033      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004068:	d82c      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d826      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800407a:	d02b      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800407c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004080:	d820      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004086:	d012      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408c:	d81a      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d022      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004096:	d115      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409c:	3308      	adds	r3, #8
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fbff 	bl	80048a4 <RCCEx_PLL2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040ac:	e015      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	3328      	adds	r3, #40	; 0x28
 80040b4:	2102      	movs	r1, #2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fca6 	bl	8004a08 <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040c2:	e00a      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ca:	e006      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040cc:	bf00      	nop
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	4a35      	ldr	r2, [pc, #212]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6553      	str	r3, [r2, #84]	; 0x54
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800410e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004118:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800411c:	460b      	mov	r3, r1
 800411e:	4313      	orrs	r3, r2
 8004120:	d058      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800412a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800412e:	d033      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004130:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004134:	d82c      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413a:	d02f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004140:	d826      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004146:	d02b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800414c:	d820      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d012      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004158:	d81a      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d022      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004162:	d115      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004168:	3308      	adds	r3, #8
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fb99 	bl	80048a4 <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004178:	e015      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417e:	3328      	adds	r3, #40	; 0x28
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc40 	bl	8004a08 <RCCEx_PLL3_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800418e:	e00a      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004196:	e006      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004198:	bf00      	nop
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10e      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041be:	4a02      	ldr	r2, [pc, #8]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	e006      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041c6:	bf00      	nop
 80041c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80041e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80041ee:	460b      	mov	r3, r1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	d055      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004200:	d033      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004202:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004206:	d82c      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	d02f      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004212:	d826      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004214:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004218:	d02b      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800421a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800421e:	d820      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004224:	d012      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422a:	d81a      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d022      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004234:	d115      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423a:	3308      	adds	r3, #8
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fb30 	bl	80048a4 <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800424a:	e015      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	3328      	adds	r3, #40	; 0x28
 8004252:	2102      	movs	r1, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fbd7 	bl	8004a08 <RCCEx_PLL3_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004260:	e00a      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004268:	e006      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800426a:	bf00      	nop
 800426c:	e004      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004280:	4ba1      	ldr	r3, [pc, #644]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004290:	4a9d      	ldr	r2, [pc, #628]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004292:	430b      	orrs	r3, r1
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f002 0308 	and.w	r3, r2, #8
 80042ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d01e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	3328      	adds	r3, #40	; 0x28
 80042d4:	2102      	movs	r1, #2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fb96 	bl	8004a08 <RCCEx_PLL3_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042e8:	4b87      	ldr	r3, [pc, #540]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f8:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f002 0310 	and.w	r3, r2, #16
 800430a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004314:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d01e      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d10c      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004330:	3328      	adds	r3, #40	; 0x28
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb67 	bl	8004a08 <RCCEx_PLL3_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004346:	4b70      	ldr	r3, [pc, #448]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004356:	4a6c      	ldr	r2, [pc, #432]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004358:	430b      	orrs	r3, r1
 800435a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004372:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d03e      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004388:	d022      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800438a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800438e:	d81b      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d00b      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800439a:	e015      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	3308      	adds	r3, #8
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fa7d 	bl	80048a4 <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043b0:	e00f      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	3328      	adds	r3, #40	; 0x28
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fb24 	bl	8004a08 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043c6:	e004      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043ce:	e000      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80043d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043da:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ea:	4a47      	ldr	r2, [pc, #284]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6593      	str	r3, [r2, #88]	; 0x58
 80043f0:	e003      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004406:	67bb      	str	r3, [r7, #120]	; 0x78
 8004408:	2300      	movs	r3, #0
 800440a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800440c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004422:	d01f      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004428:	d818      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d003      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004434:	d007      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004436:	e011      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4a32      	ldr	r2, [pc, #200]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004444:	e00f      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	3328      	adds	r3, #40	; 0x28
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fada 	bl	8004a08 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6553      	str	r3, [r2, #84]	; 0x54
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800449a:	673b      	str	r3, [r7, #112]	; 0x70
 800449c:	2300      	movs	r3, #0
 800449e:	677b      	str	r3, [r7, #116]	; 0x74
 80044a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80044a4:	460b      	mov	r3, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	d034      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d007      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044c8:	e00e      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ce:	3308      	adds	r3, #8
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f9e6 	bl	80048a4 <RCCEx_PLL2_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044de:	e003      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10d      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	4a02      	ldr	r2, [pc, #8]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004500:	430b      	orrs	r3, r1
 8004502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004504:	e006      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004506:	bf00      	nop
 8004508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004520:	66bb      	str	r3, [r7, #104]	; 0x68
 8004522:	2300      	movs	r3, #0
 8004524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004526:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d00c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	3328      	adds	r3, #40	; 0x28
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa65 	bl	8004a08 <RCCEx_PLL3_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004556:	663b      	str	r3, [r7, #96]	; 0x60
 8004558:	2300      	movs	r3, #0
 800455a:	667b      	str	r3, [r7, #100]	; 0x64
 800455c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d038      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004572:	d018      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004578:	d811      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800457a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457e:	d014      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004584:	d80b      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d106      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004590:	4bc3      	ldr	r3, [pc, #780]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4ac2      	ldr	r2, [pc, #776]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045a4:	e004      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045a6:	bf00      	nop
 80045a8:	e002      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b8:	4bb9      	ldr	r3, [pc, #740]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c8:	4ab5      	ldr	r2, [pc, #724]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ca:	430b      	orrs	r3, r1
 80045cc:	6553      	str	r3, [r2, #84]	; 0x54
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80045e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e6:	2300      	movs	r3, #0
 80045e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f4:	4baa      	ldr	r3, [pc, #680]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	4aa7      	ldr	r2, [pc, #668]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004614:	653b      	str	r3, [r7, #80]	; 0x50
 8004616:	2300      	movs	r3, #0
 8004618:	657b      	str	r3, [r7, #84]	; 0x54
 800461a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004624:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004634:	4a9a      	ldr	r2, [pc, #616]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004636:	430b      	orrs	r3, r1
 8004638:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004646:	64bb      	str	r3, [r7, #72]	; 0x48
 8004648:	2300      	movs	r3, #0
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004650:	460b      	mov	r3, r1
 8004652:	4313      	orrs	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004656:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004664:	4a8e      	ldr	r2, [pc, #568]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004676:	643b      	str	r3, [r7, #64]	; 0x40
 8004678:	2300      	movs	r3, #0
 800467a:	647b      	str	r3, [r7, #68]	; 0x44
 800467c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d00e      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004686:	4b86      	ldr	r3, [pc, #536]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	4a85      	ldr	r2, [pc, #532]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004690:	6113      	str	r3, [r2, #16]
 8004692:	4b83      	ldr	r3, [pc, #524]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004694:	6919      	ldr	r1, [r3, #16]
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800469e:	4a80      	ldr	r2, [pc, #512]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046b2:	2300      	movs	r3, #0
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046c0:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	4a74      	ldr	r2, [pc, #464]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046f0:	4b6b      	ldr	r3, [pc, #428]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	4a67      	ldr	r2, [pc, #412]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004702:	430b      	orrs	r3, r1
 8004704:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	2100      	movs	r1, #0
 8004710:	62b9      	str	r1, [r7, #40]	; 0x28
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004718:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d011      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	3308      	adds	r3, #8
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f8ba 	bl	80048a4 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	2100      	movs	r1, #0
 8004750:	6239      	str	r1, [r7, #32]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
 8004758:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d011      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004766:	3308      	adds	r3, #8
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f89a 	bl	80048a4 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	2100      	movs	r1, #0
 8004790:	61b9      	str	r1, [r7, #24]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d011      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	3308      	adds	r3, #8
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f87a 	bl	80048a4 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	2100      	movs	r1, #0
 80047d0:	6139      	str	r1, [r7, #16]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d011      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	3328      	adds	r3, #40	; 0x28
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f90c 	bl	8004a08 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	2100      	movs	r1, #0
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d011      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	3328      	adds	r3, #40	; 0x28
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f8ec 	bl	8004a08 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	2100      	movs	r1, #0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	e9d7 1200 	ldrd	r1, r2, [r7]
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d011      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	3328      	adds	r3, #40	; 0x28
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f8cc 	bl	8004a08 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004886:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
}
 8004894:	4618      	mov	r0, r3
 8004896:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800489a:	46bd      	mov	sp, r7
 800489c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a0:	58024400 	.word	0x58024400

080048a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d101      	bne.n	80048c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e099      	b.n	80049f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048c2:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a4e      	ldr	r2, [pc, #312]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ce:	f7fc f993 	bl	8000bf8 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048d6:	f7fc f98f 	bl	8000bf8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e086      	b.n	80049f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048e8:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048f4:	4b42      	ldr	r3, [pc, #264]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	031b      	lsls	r3, r3, #12
 8004902:	493f      	ldr	r1, [pc, #252]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	628b      	str	r3, [r1, #40]	; 0x28
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	3b01      	subs	r3, #1
 800490e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	025b      	lsls	r3, r3, #9
 800491a:	b29b      	uxth	r3, r3
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	3b01      	subs	r3, #1
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004938:	4931      	ldr	r1, [pc, #196]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	492d      	ldr	r1, [pc, #180]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	f023 0220 	bic.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	4928      	ldr	r1, [pc, #160]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004968:	f023 0310 	bic.w	r3, r3, #16
 800496c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <RCCEx_PLL2_Config+0x160>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	69d2      	ldr	r2, [r2, #28]
 800497a:	00d2      	lsls	r2, r2, #3
 800497c:	4920      	ldr	r1, [pc, #128]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004982:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004988:	f043 0310 	orr.w	r3, r3, #16
 800498c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 800499a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800499e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049a0:	e00f      	b.n	80049c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b4:	e005      	b.n	80049c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ce:	f7fc f913 	bl	8000bf8 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049d4:	e008      	b.n	80049e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049d6:	f7fc f90f 	bl	8000bf8 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <RCCEx_PLL2_Config+0x15c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	58024400 	.word	0x58024400
 8004a04:	ffff0007 	.word	0xffff0007

08004a08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a16:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d101      	bne.n	8004a26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e099      	b.n	8004b5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a26:	4b4f      	ldr	r3, [pc, #316]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a32:	f7fc f8e1 	bl	8000bf8 <HAL_GetTick>
 8004a36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a3a:	f7fc f8dd 	bl	8000bf8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e086      	b.n	8004b5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a4c:	4b45      	ldr	r3, [pc, #276]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	051b      	lsls	r3, r3, #20
 8004a66:	493f      	ldr	r1, [pc, #252]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	025b      	lsls	r3, r3, #9
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a9c:	4931      	ldr	r1, [pc, #196]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	492d      	ldr	r1, [pc, #180]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4928      	ldr	r1, [pc, #160]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ac6:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4a26      	ldr	r2, [pc, #152]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <RCCEx_PLL3_Config+0x160>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	69d2      	ldr	r2, [r2, #28]
 8004ade:	00d2      	lsls	r2, r2, #3
 8004ae0:	4920      	ldr	r1, [pc, #128]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b04:	e00f      	b.n	8004b26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d106      	bne.n	8004b1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b0c:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b18:	e005      	b.n	8004b26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b32:	f7fc f861 	bl	8000bf8 <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b3a:	f7fc f85d 	bl	8000bf8 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e006      	b.n	8004b5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <RCCEx_PLL3_Config+0x15c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
 8004b68:	ffff0007 	.word	0xffff0007

08004b6c <__errno>:
 8004b6c:	4b01      	ldr	r3, [pc, #4]	; (8004b74 <__errno+0x8>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	24000014 	.word	0x24000014

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	; (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	; (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f000 fc8e 	bl	80054ac <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	0800556c 	.word	0x0800556c
 8004bb4:	0800556c 	.word	0x0800556c
 8004bb8:	0800556c 	.word	0x0800556c
 8004bbc:	08005570 	.word	0x08005570

08004bc0 <memcpy>:
 8004bc0:	440a      	add	r2, r1
 8004bc2:	4291      	cmp	r1, r2
 8004bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bc8:	d100      	bne.n	8004bcc <memcpy+0xc>
 8004bca:	4770      	bx	lr
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	d1f9      	bne.n	8004bce <memcpy+0xe>
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <siprintf>:
 8004bec:	b40e      	push	{r1, r2, r3}
 8004bee:	b500      	push	{lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bf4:	9002      	str	r0, [sp, #8]
 8004bf6:	9006      	str	r0, [sp, #24]
 8004bf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bfc:	4809      	ldr	r0, [pc, #36]	; (8004c24 <siprintf+0x38>)
 8004bfe:	9107      	str	r1, [sp, #28]
 8004c00:	9104      	str	r1, [sp, #16]
 8004c02:	4909      	ldr	r1, [pc, #36]	; (8004c28 <siprintf+0x3c>)
 8004c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c08:	9105      	str	r1, [sp, #20]
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	a902      	add	r1, sp, #8
 8004c10:	f000 f868 	bl	8004ce4 <_svfiprintf_r>
 8004c14:	9b02      	ldr	r3, [sp, #8]
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	b01c      	add	sp, #112	; 0x70
 8004c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c20:	b003      	add	sp, #12
 8004c22:	4770      	bx	lr
 8004c24:	24000014 	.word	0x24000014
 8004c28:	ffff0208 	.word	0xffff0208

08004c2c <__ssputs_r>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	688e      	ldr	r6, [r1, #8]
 8004c32:	429e      	cmp	r6, r3
 8004c34:	4682      	mov	sl, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	4690      	mov	r8, r2
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	d838      	bhi.n	8004cb0 <__ssputs_r+0x84>
 8004c3e:	898a      	ldrh	r2, [r1, #12]
 8004c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c44:	d032      	beq.n	8004cac <__ssputs_r+0x80>
 8004c46:	6825      	ldr	r5, [r4, #0]
 8004c48:	6909      	ldr	r1, [r1, #16]
 8004c4a:	eba5 0901 	sub.w	r9, r5, r1
 8004c4e:	6965      	ldr	r5, [r4, #20]
 8004c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c58:	3301      	adds	r3, #1
 8004c5a:	444b      	add	r3, r9
 8004c5c:	106d      	asrs	r5, r5, #1
 8004c5e:	429d      	cmp	r5, r3
 8004c60:	bf38      	it	cc
 8004c62:	461d      	movcc	r5, r3
 8004c64:	0553      	lsls	r3, r2, #21
 8004c66:	d531      	bpl.n	8004ccc <__ssputs_r+0xa0>
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f000 fb55 	bl	8005318 <_malloc_r>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	b950      	cbnz	r0, 8004c88 <__ssputs_r+0x5c>
 8004c72:	230c      	movs	r3, #12
 8004c74:	f8ca 3000 	str.w	r3, [sl]
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c7e:	81a3      	strh	r3, [r4, #12]
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c88:	6921      	ldr	r1, [r4, #16]
 8004c8a:	464a      	mov	r2, r9
 8004c8c:	f7ff ff98 	bl	8004bc0 <memcpy>
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	6126      	str	r6, [r4, #16]
 8004c9e:	6165      	str	r5, [r4, #20]
 8004ca0:	444e      	add	r6, r9
 8004ca2:	eba5 0509 	sub.w	r5, r5, r9
 8004ca6:	6026      	str	r6, [r4, #0]
 8004ca8:	60a5      	str	r5, [r4, #8]
 8004caa:	463e      	mov	r6, r7
 8004cac:	42be      	cmp	r6, r7
 8004cae:	d900      	bls.n	8004cb2 <__ssputs_r+0x86>
 8004cb0:	463e      	mov	r6, r7
 8004cb2:	6820      	ldr	r0, [r4, #0]
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	f000 faa8 	bl	800520c <memmove>
 8004cbc:	68a3      	ldr	r3, [r4, #8]
 8004cbe:	1b9b      	subs	r3, r3, r6
 8004cc0:	60a3      	str	r3, [r4, #8]
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	4433      	add	r3, r6
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e7db      	b.n	8004c84 <__ssputs_r+0x58>
 8004ccc:	462a      	mov	r2, r5
 8004cce:	f000 fb97 	bl	8005400 <_realloc_r>
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d1e1      	bne.n	8004c9c <__ssputs_r+0x70>
 8004cd8:	6921      	ldr	r1, [r4, #16]
 8004cda:	4650      	mov	r0, sl
 8004cdc:	f000 fab0 	bl	8005240 <_free_r>
 8004ce0:	e7c7      	b.n	8004c72 <__ssputs_r+0x46>
	...

08004ce4 <_svfiprintf_r>:
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	4698      	mov	r8, r3
 8004cea:	898b      	ldrh	r3, [r1, #12]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	b09d      	sub	sp, #116	; 0x74
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	d50e      	bpl.n	8004d16 <_svfiprintf_r+0x32>
 8004cf8:	690b      	ldr	r3, [r1, #16]
 8004cfa:	b963      	cbnz	r3, 8004d16 <_svfiprintf_r+0x32>
 8004cfc:	2140      	movs	r1, #64	; 0x40
 8004cfe:	f000 fb0b 	bl	8005318 <_malloc_r>
 8004d02:	6028      	str	r0, [r5, #0]
 8004d04:	6128      	str	r0, [r5, #16]
 8004d06:	b920      	cbnz	r0, 8004d12 <_svfiprintf_r+0x2e>
 8004d08:	230c      	movs	r3, #12
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	e0d1      	b.n	8004eb6 <_svfiprintf_r+0x1d2>
 8004d12:	2340      	movs	r3, #64	; 0x40
 8004d14:	616b      	str	r3, [r5, #20]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d24:	2330      	movs	r3, #48	; 0x30
 8004d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ed0 <_svfiprintf_r+0x1ec>
 8004d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d2e:	f04f 0901 	mov.w	r9, #1
 8004d32:	4623      	mov	r3, r4
 8004d34:	469a      	mov	sl, r3
 8004d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d3a:	b10a      	cbz	r2, 8004d40 <_svfiprintf_r+0x5c>
 8004d3c:	2a25      	cmp	r2, #37	; 0x25
 8004d3e:	d1f9      	bne.n	8004d34 <_svfiprintf_r+0x50>
 8004d40:	ebba 0b04 	subs.w	fp, sl, r4
 8004d44:	d00b      	beq.n	8004d5e <_svfiprintf_r+0x7a>
 8004d46:	465b      	mov	r3, fp
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f7ff ff6d 	bl	8004c2c <__ssputs_r>
 8004d52:	3001      	adds	r0, #1
 8004d54:	f000 80aa 	beq.w	8004eac <_svfiprintf_r+0x1c8>
 8004d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d5a:	445a      	add	r2, fp
 8004d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80a2 	beq.w	8004eac <_svfiprintf_r+0x1c8>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d72:	f10a 0a01 	add.w	sl, sl, #1
 8004d76:	9304      	str	r3, [sp, #16]
 8004d78:	9307      	str	r3, [sp, #28]
 8004d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d80:	4654      	mov	r4, sl
 8004d82:	2205      	movs	r2, #5
 8004d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d88:	4851      	ldr	r0, [pc, #324]	; (8004ed0 <_svfiprintf_r+0x1ec>)
 8004d8a:	f7fb faa9 	bl	80002e0 <memchr>
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	b9d8      	cbnz	r0, 8004dca <_svfiprintf_r+0xe6>
 8004d92:	06d0      	lsls	r0, r2, #27
 8004d94:	bf44      	itt	mi
 8004d96:	2320      	movmi	r3, #32
 8004d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d9c:	0711      	lsls	r1, r2, #28
 8004d9e:	bf44      	itt	mi
 8004da0:	232b      	movmi	r3, #43	; 0x2b
 8004da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004da6:	f89a 3000 	ldrb.w	r3, [sl]
 8004daa:	2b2a      	cmp	r3, #42	; 0x2a
 8004dac:	d015      	beq.n	8004dda <_svfiprintf_r+0xf6>
 8004dae:	9a07      	ldr	r2, [sp, #28]
 8004db0:	4654      	mov	r4, sl
 8004db2:	2000      	movs	r0, #0
 8004db4:	f04f 0c0a 	mov.w	ip, #10
 8004db8:	4621      	mov	r1, r4
 8004dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dbe:	3b30      	subs	r3, #48	; 0x30
 8004dc0:	2b09      	cmp	r3, #9
 8004dc2:	d94e      	bls.n	8004e62 <_svfiprintf_r+0x17e>
 8004dc4:	b1b0      	cbz	r0, 8004df4 <_svfiprintf_r+0x110>
 8004dc6:	9207      	str	r2, [sp, #28]
 8004dc8:	e014      	b.n	8004df4 <_svfiprintf_r+0x110>
 8004dca:	eba0 0308 	sub.w	r3, r0, r8
 8004dce:	fa09 f303 	lsl.w	r3, r9, r3
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	46a2      	mov	sl, r4
 8004dd8:	e7d2      	b.n	8004d80 <_svfiprintf_r+0x9c>
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	9103      	str	r1, [sp, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfbb      	ittet	lt
 8004de6:	425b      	neglt	r3, r3
 8004de8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dec:	9307      	strge	r3, [sp, #28]
 8004dee:	9307      	strlt	r3, [sp, #28]
 8004df0:	bfb8      	it	lt
 8004df2:	9204      	strlt	r2, [sp, #16]
 8004df4:	7823      	ldrb	r3, [r4, #0]
 8004df6:	2b2e      	cmp	r3, #46	; 0x2e
 8004df8:	d10c      	bne.n	8004e14 <_svfiprintf_r+0x130>
 8004dfa:	7863      	ldrb	r3, [r4, #1]
 8004dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dfe:	d135      	bne.n	8004e6c <_svfiprintf_r+0x188>
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	9203      	str	r2, [sp, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bfb8      	it	lt
 8004e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e10:	3402      	adds	r4, #2
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ee0 <_svfiprintf_r+0x1fc>
 8004e18:	7821      	ldrb	r1, [r4, #0]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	4650      	mov	r0, sl
 8004e1e:	f7fb fa5f 	bl	80002e0 <memchr>
 8004e22:	b140      	cbz	r0, 8004e36 <_svfiprintf_r+0x152>
 8004e24:	2340      	movs	r3, #64	; 0x40
 8004e26:	eba0 000a 	sub.w	r0, r0, sl
 8004e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8004e2e:	9b04      	ldr	r3, [sp, #16]
 8004e30:	4303      	orrs	r3, r0
 8004e32:	3401      	adds	r4, #1
 8004e34:	9304      	str	r3, [sp, #16]
 8004e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3a:	4826      	ldr	r0, [pc, #152]	; (8004ed4 <_svfiprintf_r+0x1f0>)
 8004e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e40:	2206      	movs	r2, #6
 8004e42:	f7fb fa4d 	bl	80002e0 <memchr>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d038      	beq.n	8004ebc <_svfiprintf_r+0x1d8>
 8004e4a:	4b23      	ldr	r3, [pc, #140]	; (8004ed8 <_svfiprintf_r+0x1f4>)
 8004e4c:	bb1b      	cbnz	r3, 8004e96 <_svfiprintf_r+0x1b2>
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	3307      	adds	r3, #7
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	3308      	adds	r3, #8
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5c:	4433      	add	r3, r6
 8004e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e60:	e767      	b.n	8004d32 <_svfiprintf_r+0x4e>
 8004e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e66:	460c      	mov	r4, r1
 8004e68:	2001      	movs	r0, #1
 8004e6a:	e7a5      	b.n	8004db8 <_svfiprintf_r+0xd4>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	3401      	adds	r4, #1
 8004e70:	9305      	str	r3, [sp, #20]
 8004e72:	4619      	mov	r1, r3
 8004e74:	f04f 0c0a 	mov.w	ip, #10
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e7e:	3a30      	subs	r2, #48	; 0x30
 8004e80:	2a09      	cmp	r2, #9
 8004e82:	d903      	bls.n	8004e8c <_svfiprintf_r+0x1a8>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0c5      	beq.n	8004e14 <_svfiprintf_r+0x130>
 8004e88:	9105      	str	r1, [sp, #20]
 8004e8a:	e7c3      	b.n	8004e14 <_svfiprintf_r+0x130>
 8004e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e90:	4604      	mov	r4, r0
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7f0      	b.n	8004e78 <_svfiprintf_r+0x194>
 8004e96:	ab03      	add	r3, sp, #12
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <_svfiprintf_r+0x1f8>)
 8004e9e:	a904      	add	r1, sp, #16
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f3af 8000 	nop.w
 8004ea6:	1c42      	adds	r2, r0, #1
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	d1d6      	bne.n	8004e5a <_svfiprintf_r+0x176>
 8004eac:	89ab      	ldrh	r3, [r5, #12]
 8004eae:	065b      	lsls	r3, r3, #25
 8004eb0:	f53f af2c 	bmi.w	8004d0c <_svfiprintf_r+0x28>
 8004eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eb6:	b01d      	add	sp, #116	; 0x74
 8004eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebc:	ab03      	add	r3, sp, #12
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <_svfiprintf_r+0x1f8>)
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f000 f87a 	bl	8004fc0 <_printf_i>
 8004ecc:	e7eb      	b.n	8004ea6 <_svfiprintf_r+0x1c2>
 8004ece:	bf00      	nop
 8004ed0:	08005538 	.word	0x08005538
 8004ed4:	08005542 	.word	0x08005542
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c2d 	.word	0x08004c2d
 8004ee0:	0800553e 	.word	0x0800553e

08004ee4 <_printf_common>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	4616      	mov	r6, r2
 8004eea:	4699      	mov	r9, r3
 8004eec:	688a      	ldr	r2, [r1, #8]
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfb8      	it	lt
 8004ef8:	4613      	movlt	r3, r2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f00:	4607      	mov	r7, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b10a      	cbz	r2, 8004f0a <_printf_common+0x26>
 8004f06:	3301      	adds	r3, #1
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	0699      	lsls	r1, r3, #26
 8004f0e:	bf42      	ittt	mi
 8004f10:	6833      	ldrmi	r3, [r6, #0]
 8004f12:	3302      	addmi	r3, #2
 8004f14:	6033      	strmi	r3, [r6, #0]
 8004f16:	6825      	ldr	r5, [r4, #0]
 8004f18:	f015 0506 	ands.w	r5, r5, #6
 8004f1c:	d106      	bne.n	8004f2c <_printf_common+0x48>
 8004f1e:	f104 0a19 	add.w	sl, r4, #25
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	6832      	ldr	r2, [r6, #0]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc26      	bgt.n	8004f7a <_printf_common+0x96>
 8004f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f30:	1e13      	subs	r3, r2, #0
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	bf18      	it	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d42b      	bmi.n	8004f94 <_printf_common+0xb0>
 8004f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f40:	4649      	mov	r1, r9
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c0      	blx	r8
 8004f46:	3001      	adds	r0, #1
 8004f48:	d01e      	beq.n	8004f88 <_printf_common+0xa4>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	68e5      	ldr	r5, [r4, #12]
 8004f4e:	6832      	ldr	r2, [r6, #0]
 8004f50:	f003 0306 	and.w	r3, r3, #6
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	bf08      	it	eq
 8004f58:	1aad      	subeq	r5, r5, r2
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	bf0c      	ite	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	2500      	movne	r5, #0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bfc4      	itt	gt
 8004f6a:	1a9b      	subgt	r3, r3, r2
 8004f6c:	18ed      	addgt	r5, r5, r3
 8004f6e:	2600      	movs	r6, #0
 8004f70:	341a      	adds	r4, #26
 8004f72:	42b5      	cmp	r5, r6
 8004f74:	d11a      	bne.n	8004fac <_printf_common+0xc8>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e008      	b.n	8004f8c <_printf_common+0xa8>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4638      	mov	r0, r7
 8004f82:	47c0      	blx	r8
 8004f84:	3001      	adds	r0, #1
 8004f86:	d103      	bne.n	8004f90 <_printf_common+0xac>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	3501      	adds	r5, #1
 8004f92:	e7c6      	b.n	8004f22 <_printf_common+0x3e>
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	2030      	movs	r0, #48	; 0x30
 8004f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f9e:	4422      	add	r2, r4
 8004fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa8:	3302      	adds	r3, #2
 8004faa:	e7c7      	b.n	8004f3c <_printf_common+0x58>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c0      	blx	r8
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d0e6      	beq.n	8004f88 <_printf_common+0xa4>
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7d9      	b.n	8004f72 <_printf_common+0x8e>
	...

08004fc0 <_printf_i>:
 8004fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	7e0f      	ldrb	r7, [r1, #24]
 8004fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fc8:	2f78      	cmp	r7, #120	; 0x78
 8004fca:	4691      	mov	r9, r2
 8004fcc:	4680      	mov	r8, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fd6:	d807      	bhi.n	8004fe8 <_printf_i+0x28>
 8004fd8:	2f62      	cmp	r7, #98	; 0x62
 8004fda:	d80a      	bhi.n	8004ff2 <_printf_i+0x32>
 8004fdc:	2f00      	cmp	r7, #0
 8004fde:	f000 80d8 	beq.w	8005192 <_printf_i+0x1d2>
 8004fe2:	2f58      	cmp	r7, #88	; 0x58
 8004fe4:	f000 80a3 	beq.w	800512e <_printf_i+0x16e>
 8004fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ff0:	e03a      	b.n	8005068 <_printf_i+0xa8>
 8004ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ff6:	2b15      	cmp	r3, #21
 8004ff8:	d8f6      	bhi.n	8004fe8 <_printf_i+0x28>
 8004ffa:	a101      	add	r1, pc, #4	; (adr r1, 8005000 <_printf_i+0x40>)
 8004ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005000:	08005059 	.word	0x08005059
 8005004:	0800506d 	.word	0x0800506d
 8005008:	08004fe9 	.word	0x08004fe9
 800500c:	08004fe9 	.word	0x08004fe9
 8005010:	08004fe9 	.word	0x08004fe9
 8005014:	08004fe9 	.word	0x08004fe9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fe9 	.word	0x08004fe9
 8005020:	08004fe9 	.word	0x08004fe9
 8005024:	08004fe9 	.word	0x08004fe9
 8005028:	08004fe9 	.word	0x08004fe9
 800502c:	08005179 	.word	0x08005179
 8005030:	0800509d 	.word	0x0800509d
 8005034:	0800515b 	.word	0x0800515b
 8005038:	08004fe9 	.word	0x08004fe9
 800503c:	08004fe9 	.word	0x08004fe9
 8005040:	0800519b 	.word	0x0800519b
 8005044:	08004fe9 	.word	0x08004fe9
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08004fe9 	.word	0x08004fe9
 8005050:	08004fe9 	.word	0x08004fe9
 8005054:	08005163 	.word	0x08005163
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	602a      	str	r2, [r5, #0]
 8005060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005068:	2301      	movs	r3, #1
 800506a:	e0a3      	b.n	80051b4 <_printf_i+0x1f4>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	6829      	ldr	r1, [r5, #0]
 8005070:	0606      	lsls	r6, r0, #24
 8005072:	f101 0304 	add.w	r3, r1, #4
 8005076:	d50a      	bpl.n	800508e <_printf_i+0xce>
 8005078:	680e      	ldr	r6, [r1, #0]
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	2e00      	cmp	r6, #0
 800507e:	da03      	bge.n	8005088 <_printf_i+0xc8>
 8005080:	232d      	movs	r3, #45	; 0x2d
 8005082:	4276      	negs	r6, r6
 8005084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005088:	485e      	ldr	r0, [pc, #376]	; (8005204 <_printf_i+0x244>)
 800508a:	230a      	movs	r3, #10
 800508c:	e019      	b.n	80050c2 <_printf_i+0x102>
 800508e:	680e      	ldr	r6, [r1, #0]
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005096:	bf18      	it	ne
 8005098:	b236      	sxthne	r6, r6
 800509a:	e7ef      	b.n	800507c <_printf_i+0xbc>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6029      	str	r1, [r5, #0]
 80050a4:	0601      	lsls	r1, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xec>
 80050a8:	681e      	ldr	r6, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_printf_i+0xf2>
 80050ac:	0646      	lsls	r6, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xe8>
 80050b0:	881e      	ldrh	r6, [r3, #0]
 80050b2:	4854      	ldr	r0, [pc, #336]	; (8005204 <_printf_i+0x244>)
 80050b4:	2f6f      	cmp	r7, #111	; 0x6f
 80050b6:	bf0c      	ite	eq
 80050b8:	2308      	moveq	r3, #8
 80050ba:	230a      	movne	r3, #10
 80050bc:	2100      	movs	r1, #0
 80050be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050c2:	6865      	ldr	r5, [r4, #4]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	bfa2      	ittt	ge
 80050ca:	6821      	ldrge	r1, [r4, #0]
 80050cc:	f021 0104 	bicge.w	r1, r1, #4
 80050d0:	6021      	strge	r1, [r4, #0]
 80050d2:	b90e      	cbnz	r6, 80050d8 <_printf_i+0x118>
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	d04d      	beq.n	8005174 <_printf_i+0x1b4>
 80050d8:	4615      	mov	r5, r2
 80050da:	fbb6 f1f3 	udiv	r1, r6, r3
 80050de:	fb03 6711 	mls	r7, r3, r1, r6
 80050e2:	5dc7      	ldrb	r7, [r0, r7]
 80050e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e8:	4637      	mov	r7, r6
 80050ea:	42bb      	cmp	r3, r7
 80050ec:	460e      	mov	r6, r1
 80050ee:	d9f4      	bls.n	80050da <_printf_i+0x11a>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d10b      	bne.n	800510c <_printf_i+0x14c>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07de      	lsls	r6, r3, #31
 80050f8:	d508      	bpl.n	800510c <_printf_i+0x14c>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	6861      	ldr	r1, [r4, #4]
 80050fe:	4299      	cmp	r1, r3
 8005100:	bfde      	ittt	le
 8005102:	2330      	movle	r3, #48	; 0x30
 8005104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800510c:	1b52      	subs	r2, r2, r5
 800510e:	6122      	str	r2, [r4, #16]
 8005110:	f8cd a000 	str.w	sl, [sp]
 8005114:	464b      	mov	r3, r9
 8005116:	aa03      	add	r2, sp, #12
 8005118:	4621      	mov	r1, r4
 800511a:	4640      	mov	r0, r8
 800511c:	f7ff fee2 	bl	8004ee4 <_printf_common>
 8005120:	3001      	adds	r0, #1
 8005122:	d14c      	bne.n	80051be <_printf_i+0x1fe>
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	b004      	add	sp, #16
 800512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512e:	4835      	ldr	r0, [pc, #212]	; (8005204 <_printf_i+0x244>)
 8005130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005134:	6829      	ldr	r1, [r5, #0]
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f851 6b04 	ldr.w	r6, [r1], #4
 800513c:	6029      	str	r1, [r5, #0]
 800513e:	061d      	lsls	r5, r3, #24
 8005140:	d514      	bpl.n	800516c <_printf_i+0x1ac>
 8005142:	07df      	lsls	r7, r3, #31
 8005144:	bf44      	itt	mi
 8005146:	f043 0320 	orrmi.w	r3, r3, #32
 800514a:	6023      	strmi	r3, [r4, #0]
 800514c:	b91e      	cbnz	r6, 8005156 <_printf_i+0x196>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f023 0320 	bic.w	r3, r3, #32
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	2310      	movs	r3, #16
 8005158:	e7b0      	b.n	80050bc <_printf_i+0xfc>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f043 0320 	orr.w	r3, r3, #32
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	2378      	movs	r3, #120	; 0x78
 8005164:	4828      	ldr	r0, [pc, #160]	; (8005208 <_printf_i+0x248>)
 8005166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800516a:	e7e3      	b.n	8005134 <_printf_i+0x174>
 800516c:	0659      	lsls	r1, r3, #25
 800516e:	bf48      	it	mi
 8005170:	b2b6      	uxthmi	r6, r6
 8005172:	e7e6      	b.n	8005142 <_printf_i+0x182>
 8005174:	4615      	mov	r5, r2
 8005176:	e7bb      	b.n	80050f0 <_printf_i+0x130>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	6826      	ldr	r6, [r4, #0]
 800517c:	6961      	ldr	r1, [r4, #20]
 800517e:	1d18      	adds	r0, r3, #4
 8005180:	6028      	str	r0, [r5, #0]
 8005182:	0635      	lsls	r5, r6, #24
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	d501      	bpl.n	800518c <_printf_i+0x1cc>
 8005188:	6019      	str	r1, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0x1d2>
 800518c:	0670      	lsls	r0, r6, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0x1c8>
 8005190:	8019      	strh	r1, [r3, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	4615      	mov	r5, r2
 8005198:	e7ba      	b.n	8005110 <_printf_i+0x150>
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	602a      	str	r2, [r5, #0]
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	6862      	ldr	r2, [r4, #4]
 80051a4:	2100      	movs	r1, #0
 80051a6:	4628      	mov	r0, r5
 80051a8:	f7fb f89a 	bl	80002e0 <memchr>
 80051ac:	b108      	cbz	r0, 80051b2 <_printf_i+0x1f2>
 80051ae:	1b40      	subs	r0, r0, r5
 80051b0:	6060      	str	r0, [r4, #4]
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	2300      	movs	r3, #0
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	e7a8      	b.n	8005110 <_printf_i+0x150>
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4649      	mov	r1, r9
 80051c4:	4640      	mov	r0, r8
 80051c6:	47d0      	blx	sl
 80051c8:	3001      	adds	r0, #1
 80051ca:	d0ab      	beq.n	8005124 <_printf_i+0x164>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	d413      	bmi.n	80051fa <_printf_i+0x23a>
 80051d2:	68e0      	ldr	r0, [r4, #12]
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	4298      	cmp	r0, r3
 80051d8:	bfb8      	it	lt
 80051da:	4618      	movlt	r0, r3
 80051dc:	e7a4      	b.n	8005128 <_printf_i+0x168>
 80051de:	2301      	movs	r3, #1
 80051e0:	4632      	mov	r2, r6
 80051e2:	4649      	mov	r1, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	47d0      	blx	sl
 80051e8:	3001      	adds	r0, #1
 80051ea:	d09b      	beq.n	8005124 <_printf_i+0x164>
 80051ec:	3501      	adds	r5, #1
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	9903      	ldr	r1, [sp, #12]
 80051f2:	1a5b      	subs	r3, r3, r1
 80051f4:	42ab      	cmp	r3, r5
 80051f6:	dcf2      	bgt.n	80051de <_printf_i+0x21e>
 80051f8:	e7eb      	b.n	80051d2 <_printf_i+0x212>
 80051fa:	2500      	movs	r5, #0
 80051fc:	f104 0619 	add.w	r6, r4, #25
 8005200:	e7f5      	b.n	80051ee <_printf_i+0x22e>
 8005202:	bf00      	nop
 8005204:	08005549 	.word	0x08005549
 8005208:	0800555a 	.word	0x0800555a

0800520c <memmove>:
 800520c:	4288      	cmp	r0, r1
 800520e:	b510      	push	{r4, lr}
 8005210:	eb01 0402 	add.w	r4, r1, r2
 8005214:	d902      	bls.n	800521c <memmove+0x10>
 8005216:	4284      	cmp	r4, r0
 8005218:	4623      	mov	r3, r4
 800521a:	d807      	bhi.n	800522c <memmove+0x20>
 800521c:	1e43      	subs	r3, r0, #1
 800521e:	42a1      	cmp	r1, r4
 8005220:	d008      	beq.n	8005234 <memmove+0x28>
 8005222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800522a:	e7f8      	b.n	800521e <memmove+0x12>
 800522c:	4402      	add	r2, r0
 800522e:	4601      	mov	r1, r0
 8005230:	428a      	cmp	r2, r1
 8005232:	d100      	bne.n	8005236 <memmove+0x2a>
 8005234:	bd10      	pop	{r4, pc}
 8005236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800523a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800523e:	e7f7      	b.n	8005230 <memmove+0x24>

08005240 <_free_r>:
 8005240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005242:	2900      	cmp	r1, #0
 8005244:	d044      	beq.n	80052d0 <_free_r+0x90>
 8005246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800524a:	9001      	str	r0, [sp, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f1a1 0404 	sub.w	r4, r1, #4
 8005252:	bfb8      	it	lt
 8005254:	18e4      	addlt	r4, r4, r3
 8005256:	f000 f913 	bl	8005480 <__malloc_lock>
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <_free_r+0x94>)
 800525c:	9801      	ldr	r0, [sp, #4]
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	b933      	cbnz	r3, 8005270 <_free_r+0x30>
 8005262:	6063      	str	r3, [r4, #4]
 8005264:	6014      	str	r4, [r2, #0]
 8005266:	b003      	add	sp, #12
 8005268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800526c:	f000 b90e 	b.w	800548c <__malloc_unlock>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d908      	bls.n	8005286 <_free_r+0x46>
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	1961      	adds	r1, r4, r5
 8005278:	428b      	cmp	r3, r1
 800527a:	bf01      	itttt	eq
 800527c:	6819      	ldreq	r1, [r3, #0]
 800527e:	685b      	ldreq	r3, [r3, #4]
 8005280:	1949      	addeq	r1, r1, r5
 8005282:	6021      	streq	r1, [r4, #0]
 8005284:	e7ed      	b.n	8005262 <_free_r+0x22>
 8005286:	461a      	mov	r2, r3
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	b10b      	cbz	r3, 8005290 <_free_r+0x50>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d9fa      	bls.n	8005286 <_free_r+0x46>
 8005290:	6811      	ldr	r1, [r2, #0]
 8005292:	1855      	adds	r5, r2, r1
 8005294:	42a5      	cmp	r5, r4
 8005296:	d10b      	bne.n	80052b0 <_free_r+0x70>
 8005298:	6824      	ldr	r4, [r4, #0]
 800529a:	4421      	add	r1, r4
 800529c:	1854      	adds	r4, r2, r1
 800529e:	42a3      	cmp	r3, r4
 80052a0:	6011      	str	r1, [r2, #0]
 80052a2:	d1e0      	bne.n	8005266 <_free_r+0x26>
 80052a4:	681c      	ldr	r4, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	6053      	str	r3, [r2, #4]
 80052aa:	4421      	add	r1, r4
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	e7da      	b.n	8005266 <_free_r+0x26>
 80052b0:	d902      	bls.n	80052b8 <_free_r+0x78>
 80052b2:	230c      	movs	r3, #12
 80052b4:	6003      	str	r3, [r0, #0]
 80052b6:	e7d6      	b.n	8005266 <_free_r+0x26>
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	1961      	adds	r1, r4, r5
 80052bc:	428b      	cmp	r3, r1
 80052be:	bf04      	itt	eq
 80052c0:	6819      	ldreq	r1, [r3, #0]
 80052c2:	685b      	ldreq	r3, [r3, #4]
 80052c4:	6063      	str	r3, [r4, #4]
 80052c6:	bf04      	itt	eq
 80052c8:	1949      	addeq	r1, r1, r5
 80052ca:	6021      	streq	r1, [r4, #0]
 80052cc:	6054      	str	r4, [r2, #4]
 80052ce:	e7ca      	b.n	8005266 <_free_r+0x26>
 80052d0:	b003      	add	sp, #12
 80052d2:	bd30      	pop	{r4, r5, pc}
 80052d4:	240001a0 	.word	0x240001a0

080052d8 <sbrk_aligned>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4e0e      	ldr	r6, [pc, #56]	; (8005314 <sbrk_aligned+0x3c>)
 80052dc:	460c      	mov	r4, r1
 80052de:	6831      	ldr	r1, [r6, #0]
 80052e0:	4605      	mov	r5, r0
 80052e2:	b911      	cbnz	r1, 80052ea <sbrk_aligned+0x12>
 80052e4:	f000 f8bc 	bl	8005460 <_sbrk_r>
 80052e8:	6030      	str	r0, [r6, #0]
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f8b7 	bl	8005460 <_sbrk_r>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d00a      	beq.n	800530c <sbrk_aligned+0x34>
 80052f6:	1cc4      	adds	r4, r0, #3
 80052f8:	f024 0403 	bic.w	r4, r4, #3
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d007      	beq.n	8005310 <sbrk_aligned+0x38>
 8005300:	1a21      	subs	r1, r4, r0
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f8ac 	bl	8005460 <_sbrk_r>
 8005308:	3001      	adds	r0, #1
 800530a:	d101      	bne.n	8005310 <sbrk_aligned+0x38>
 800530c:	f04f 34ff 	mov.w	r4, #4294967295
 8005310:	4620      	mov	r0, r4
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	240001a4 	.word	0x240001a4

08005318 <_malloc_r>:
 8005318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531c:	1ccd      	adds	r5, r1, #3
 800531e:	f025 0503 	bic.w	r5, r5, #3
 8005322:	3508      	adds	r5, #8
 8005324:	2d0c      	cmp	r5, #12
 8005326:	bf38      	it	cc
 8005328:	250c      	movcc	r5, #12
 800532a:	2d00      	cmp	r5, #0
 800532c:	4607      	mov	r7, r0
 800532e:	db01      	blt.n	8005334 <_malloc_r+0x1c>
 8005330:	42a9      	cmp	r1, r5
 8005332:	d905      	bls.n	8005340 <_malloc_r+0x28>
 8005334:	230c      	movs	r3, #12
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	2600      	movs	r6, #0
 800533a:	4630      	mov	r0, r6
 800533c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005340:	4e2e      	ldr	r6, [pc, #184]	; (80053fc <_malloc_r+0xe4>)
 8005342:	f000 f89d 	bl	8005480 <__malloc_lock>
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	461c      	mov	r4, r3
 800534a:	bb34      	cbnz	r4, 800539a <_malloc_r+0x82>
 800534c:	4629      	mov	r1, r5
 800534e:	4638      	mov	r0, r7
 8005350:	f7ff ffc2 	bl	80052d8 <sbrk_aligned>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	4604      	mov	r4, r0
 8005358:	d14d      	bne.n	80053f6 <_malloc_r+0xde>
 800535a:	6834      	ldr	r4, [r6, #0]
 800535c:	4626      	mov	r6, r4
 800535e:	2e00      	cmp	r6, #0
 8005360:	d140      	bne.n	80053e4 <_malloc_r+0xcc>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	4631      	mov	r1, r6
 8005366:	4638      	mov	r0, r7
 8005368:	eb04 0803 	add.w	r8, r4, r3
 800536c:	f000 f878 	bl	8005460 <_sbrk_r>
 8005370:	4580      	cmp	r8, r0
 8005372:	d13a      	bne.n	80053ea <_malloc_r+0xd2>
 8005374:	6821      	ldr	r1, [r4, #0]
 8005376:	3503      	adds	r5, #3
 8005378:	1a6d      	subs	r5, r5, r1
 800537a:	f025 0503 	bic.w	r5, r5, #3
 800537e:	3508      	adds	r5, #8
 8005380:	2d0c      	cmp	r5, #12
 8005382:	bf38      	it	cc
 8005384:	250c      	movcc	r5, #12
 8005386:	4629      	mov	r1, r5
 8005388:	4638      	mov	r0, r7
 800538a:	f7ff ffa5 	bl	80052d8 <sbrk_aligned>
 800538e:	3001      	adds	r0, #1
 8005390:	d02b      	beq.n	80053ea <_malloc_r+0xd2>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	442b      	add	r3, r5
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	e00e      	b.n	80053b8 <_malloc_r+0xa0>
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	1b52      	subs	r2, r2, r5
 800539e:	d41e      	bmi.n	80053de <_malloc_r+0xc6>
 80053a0:	2a0b      	cmp	r2, #11
 80053a2:	d916      	bls.n	80053d2 <_malloc_r+0xba>
 80053a4:	1961      	adds	r1, r4, r5
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	6025      	str	r5, [r4, #0]
 80053aa:	bf18      	it	ne
 80053ac:	6059      	strne	r1, [r3, #4]
 80053ae:	6863      	ldr	r3, [r4, #4]
 80053b0:	bf08      	it	eq
 80053b2:	6031      	streq	r1, [r6, #0]
 80053b4:	5162      	str	r2, [r4, r5]
 80053b6:	604b      	str	r3, [r1, #4]
 80053b8:	4638      	mov	r0, r7
 80053ba:	f104 060b 	add.w	r6, r4, #11
 80053be:	f000 f865 	bl	800548c <__malloc_unlock>
 80053c2:	f026 0607 	bic.w	r6, r6, #7
 80053c6:	1d23      	adds	r3, r4, #4
 80053c8:	1af2      	subs	r2, r6, r3
 80053ca:	d0b6      	beq.n	800533a <_malloc_r+0x22>
 80053cc:	1b9b      	subs	r3, r3, r6
 80053ce:	50a3      	str	r3, [r4, r2]
 80053d0:	e7b3      	b.n	800533a <_malloc_r+0x22>
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	bf0c      	ite	eq
 80053d8:	6032      	streq	r2, [r6, #0]
 80053da:	605a      	strne	r2, [r3, #4]
 80053dc:	e7ec      	b.n	80053b8 <_malloc_r+0xa0>
 80053de:	4623      	mov	r3, r4
 80053e0:	6864      	ldr	r4, [r4, #4]
 80053e2:	e7b2      	b.n	800534a <_malloc_r+0x32>
 80053e4:	4634      	mov	r4, r6
 80053e6:	6876      	ldr	r6, [r6, #4]
 80053e8:	e7b9      	b.n	800535e <_malloc_r+0x46>
 80053ea:	230c      	movs	r3, #12
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4638      	mov	r0, r7
 80053f0:	f000 f84c 	bl	800548c <__malloc_unlock>
 80053f4:	e7a1      	b.n	800533a <_malloc_r+0x22>
 80053f6:	6025      	str	r5, [r4, #0]
 80053f8:	e7de      	b.n	80053b8 <_malloc_r+0xa0>
 80053fa:	bf00      	nop
 80053fc:	240001a0 	.word	0x240001a0

08005400 <_realloc_r>:
 8005400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005404:	4680      	mov	r8, r0
 8005406:	4614      	mov	r4, r2
 8005408:	460e      	mov	r6, r1
 800540a:	b921      	cbnz	r1, 8005416 <_realloc_r+0x16>
 800540c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005410:	4611      	mov	r1, r2
 8005412:	f7ff bf81 	b.w	8005318 <_malloc_r>
 8005416:	b92a      	cbnz	r2, 8005424 <_realloc_r+0x24>
 8005418:	f7ff ff12 	bl	8005240 <_free_r>
 800541c:	4625      	mov	r5, r4
 800541e:	4628      	mov	r0, r5
 8005420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005424:	f000 f838 	bl	8005498 <_malloc_usable_size_r>
 8005428:	4284      	cmp	r4, r0
 800542a:	4607      	mov	r7, r0
 800542c:	d802      	bhi.n	8005434 <_realloc_r+0x34>
 800542e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005432:	d812      	bhi.n	800545a <_realloc_r+0x5a>
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f7ff ff6e 	bl	8005318 <_malloc_r>
 800543c:	4605      	mov	r5, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	d0ed      	beq.n	800541e <_realloc_r+0x1e>
 8005442:	42bc      	cmp	r4, r7
 8005444:	4622      	mov	r2, r4
 8005446:	4631      	mov	r1, r6
 8005448:	bf28      	it	cs
 800544a:	463a      	movcs	r2, r7
 800544c:	f7ff fbb8 	bl	8004bc0 <memcpy>
 8005450:	4631      	mov	r1, r6
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff fef4 	bl	8005240 <_free_r>
 8005458:	e7e1      	b.n	800541e <_realloc_r+0x1e>
 800545a:	4635      	mov	r5, r6
 800545c:	e7df      	b.n	800541e <_realloc_r+0x1e>
	...

08005460 <_sbrk_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d06      	ldr	r5, [pc, #24]	; (800547c <_sbrk_r+0x1c>)
 8005464:	2300      	movs	r3, #0
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	f7fb fa56 	bl	800091c <_sbrk>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_sbrk_r+0x1a>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_sbrk_r+0x1a>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	240001a8 	.word	0x240001a8

08005480 <__malloc_lock>:
 8005480:	4801      	ldr	r0, [pc, #4]	; (8005488 <__malloc_lock+0x8>)
 8005482:	f000 b811 	b.w	80054a8 <__retarget_lock_acquire_recursive>
 8005486:	bf00      	nop
 8005488:	240001ac 	.word	0x240001ac

0800548c <__malloc_unlock>:
 800548c:	4801      	ldr	r0, [pc, #4]	; (8005494 <__malloc_unlock+0x8>)
 800548e:	f000 b80c 	b.w	80054aa <__retarget_lock_release_recursive>
 8005492:	bf00      	nop
 8005494:	240001ac 	.word	0x240001ac

08005498 <_malloc_usable_size_r>:
 8005498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800549c:	1f18      	subs	r0, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfbc      	itt	lt
 80054a2:	580b      	ldrlt	r3, [r1, r0]
 80054a4:	18c0      	addlt	r0, r0, r3
 80054a6:	4770      	bx	lr

080054a8 <__retarget_lock_acquire_recursive>:
 80054a8:	4770      	bx	lr

080054aa <__retarget_lock_release_recursive>:
 80054aa:	4770      	bx	lr

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr
